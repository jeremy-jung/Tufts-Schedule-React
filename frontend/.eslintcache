[{"/Users/dumbcan/Desktop/COMP20/Tufts-Schedule-React/frontend/src/index.js":"1","/Users/dumbcan/Desktop/COMP20/Tufts-Schedule-React/frontend/src/App.js":"2","/Users/dumbcan/Desktop/COMP20/Tufts-Schedule-React/frontend/src/components/Schedule.js":"3","/Users/dumbcan/Desktop/COMP20/Tufts-Schedule-React/frontend/src/components/Homepage.js":"4","/Users/dumbcan/Desktop/COMP20/Tufts-Schedule-React/frontend/src/components/views/OptionsMainList.js":"5","/Users/dumbcan/Desktop/COMP20/Tufts-Schedule-React/frontend/src/components/views/CoursesSelectedList.js":"6","/Users/dumbcan/Desktop/COMP20/Tufts-Schedule-React/frontend/src/components/views/CourseNameRecommendation.js":"7","/Users/dumbcan/Desktop/COMP20/Tufts-Schedule-React/frontend/src/components/views/OptionMainButton.js":"8","/Users/dumbcan/Desktop/COMP20/Tufts-Schedule-React/frontend/src/components/views/CourseSelected.js":"9","/Users/dumbcan/Desktop/COMP20/Tufts-Schedule-React/frontend/src/components/Event.js":"10"},{"size":238,"mtime":1609230344565,"results":"11","hashOfConfig":"12"},{"size":863,"mtime":1609944799668,"results":"13","hashOfConfig":"12"},{"size":634,"mtime":1610171691955,"results":"14","hashOfConfig":"12"},{"size":4117,"mtime":1610171691948,"results":"15","hashOfConfig":"12"},{"size":774,"mtime":1609230344563,"results":"16","hashOfConfig":"12"},{"size":1017,"mtime":1610171691968,"results":"17","hashOfConfig":"12"},{"size":3683,"mtime":1610171691956,"results":"18","hashOfConfig":"12"},{"size":636,"mtime":1609230344563,"results":"19","hashOfConfig":"12"},{"size":525,"mtime":1610171691962,"results":"20","hashOfConfig":"12"},{"size":505,"mtime":1610171691889,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"1yxqsx0",{"filePath":"25","messages":"26","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"24"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"24"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"24"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"24"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"/Users/dumbcan/Desktop/COMP20/Tufts-Schedule-React/frontend/src/index.js",[],["48","49"],"/Users/dumbcan/Desktop/COMP20/Tufts-Schedule-React/frontend/src/App.js",["50","51","52"],"/* \n    Main react app \n    Created by Jeremy Jung\n*/\nimport React from 'react';\nimport Homepage from \"./components/Homepage.js\";\nimport Schedule from \"./components/Schedule.js\";\n\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    Link\n} from \"react-router-dom\";\nimport Calendar from './components/Event.js';\n\nexport default class App extends React.Component {\n\n    render() {\n        return (\n            <div>\n                {/* A <Switch> looks through its children <Route>s and\n        renders the first one that matches the current URL. */}\n                <Switch>\n                    <Route path=\"/schedule\">\n                        <Schedule />\n                    </Route>\n                    <Route path=\"/\">\n                        <Homepage />\n                    </Route>\n                </Switch>\n            </div>\n        );\n    }\n}","/Users/dumbcan/Desktop/COMP20/Tufts-Schedule-React/frontend/src/components/Schedule.js",[],"/Users/dumbcan/Desktop/COMP20/Tufts-Schedule-React/frontend/src/components/Homepage.js",["53","54","55","56","57","58","59"],"/*\n    Pages: Home page\n    Created by Jeremy Jung\n*/\n\nimport React from 'react';\nimport CoursesSelectedList from './views/CoursesSelectedList.js';\nimport CourseNameRecommendation from './views/CourseNameRecommendation.js';\nimport OptionsMainList from './views/OptionsMainList.js';\nimport style from './views/styles/Homepage.module.css';\n\nclass Homepage extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            listCourseIDs: null, // all course IDs in semester catalog (mapped first letter)\n            currentInput: null,\n            recommendedCourseIDs: null,\n            selectedCourses: []\n        }\n\n        this.handleAdd = this.handleAdd.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    handleAdd(event) {\n        //prevent default event handler\n        event.preventDefault();\n\n        let nameField = document.getElementById(\"input\");\n        let name = nameField.value.toUpperCase(); // get user input\n\n        // UPDATE STATE selectedCourses \n        var arrayJoined = this.state.selectedCourses.concat(name);\n        this.setState({ selectedCourses: arrayJoined });\n\n        nameField.value = \"\";\n    }\n\n    handleGenerate() {\n        var selectedCourses = this.state.selectedCourses;\n        console.log(\"handling generate\");\n    }\n\n    componentDidMount() {\n        // initialize {listCourseIDs} in this component's state\n        this.getListCourseIDs();\n    }\n    \n    async getListCourseIDs() {\n        var API_URL = process.env.REACT_APP_API_URL + \"/courses/alg/search-table\";\n        fetch(API_URL)\n            .then(\n                (response) => response.json()\n            )\n            .then(result => {\n                //if the request is valid\n                this.setState({\n                    listCourseIDs: result.data\n                });\n            },\n            (error) => {\n                console.log(\"error\", error);\n        });\n    }\n\n    /* CourseID input scripts */\n\n    // todo: link\n    handleChange() {\n        console.log(\"handling change\");\n        let nameField = document.getElementById(\"input\");\n        let name = nameField.value.toLowerCase(); // get user input\n        this.setState((state) => ({ currentInput: name })); // update state (currentInput)\n    }\n\n\n    render() {\n        /* asynchronously render home page after getting courseIDs*/\n        if (this.state.listCourseIDs == null) {\n            // render loading state...\n            return (\n                <div className={style.container}>\n                    Loading...\n                </div>\n            );\n        }\n        else {\n            // render real UI..\n                return (\n                    <div className={style.container}>\n                        <CoursesSelectedList handleGenerate = {this.handleGenerate.bind(this)} selectedCourses={this.state.selectedCourses}>\n                            <input type = \"submit\"></input>\n                        </CoursesSelectedList>\n                        <div className={style.containerInput}>\n                            <h1>Choose a course</h1>\n                            <div>\n                                <form onSubmit={this.handleAdd}>\n                                    <div>\n                                        <input onChange={this.handleChange} list='recommendedCourseIDs' id=\"input\" className={style.courseInput} type=\"text\" autoComplete=\"off\" placeholder=\"COMP-0015\" />\n                                        <CourseNameRecommendation listCourseIDs = {this.state.listCourseIDs} currentInput = {this.state.currentInput}></CourseNameRecommendation>\n                                    </div>\n                                    <div>\n                                        <input className={style.courseSubmit} type=\"submit\" value=\"Add\" />\n                                    </div>\n                                </form>\n                            </div>\n                        </div>\n                        <OptionsMainList></OptionsMainList>\n                    </div>\n                );\n        }\n    }\n}\n\nexport default Homepage;","/Users/dumbcan/Desktop/COMP20/Tufts-Schedule-React/frontend/src/components/views/OptionsMainList.js",["60"],"/*\n    List of buttons on the top right corner listing possible options for algorithms\n    Created by Jeremy Jung\n*/\n\nimport React from 'react';\nimport style from './styles/OptionsMainList.module.css';\nimport OptionMainButton from './OptionMainButton.js';\n\nclass OptionsMainList extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    handleSubmit(event) {\n        //prevent default event handler\n        event.preventDefault();\n    }\n\n    render() {\n        return (\n            <div className={style.container}>\n                <OptionMainButton></OptionMainButton>\n                <OptionMainButton></OptionMainButton>\n                <OptionMainButton></OptionMainButton>\n            </div>\n        );\n    }\n}\n\nexport default OptionsMainList;","/Users/dumbcan/Desktop/COMP20/Tufts-Schedule-React/frontend/src/components/views/CoursesSelectedList.js",[],"/Users/dumbcan/Desktop/COMP20/Tufts-Schedule-React/frontend/src/components/views/CourseNameRecommendation.js",["61","62","63","64"],"/*\n    Drop down list of course name suggestions\n    Created by Jeremy Jung\n*/\n\nimport React from 'react';\n//import style from './styles/CourseNameRecommendation.module.css';\n\n\nclass CourseNameRecommendation extends React.Component {\n    \n    constructor (props) {\n        super(props);\n        console.log(\"render\");\n\n        this.state = {\n            recommendedCourseIDs: null,\n\n        }\n    }\n\n    // O(k) where k is length of courseID\n    // courseID is the user input\n    // listCourseIDs takes in the courseID\n    recommendSearch (listCourseIDs, courseID) {\n        var courseIDsRecommended = [];\n        let mappedResults = [];\n\n        if (courseID != undefined || courseID != null) {\n\n            // recommend if there is at least one character in input\n            if (courseID[0] != undefined) {\n\n                // mapperResults is an array of \"matched\" courses (from API) by the user input \n                mappedResults = listCourseIDs[courseID];\n                // console.log(\"listCourseIDs: \" + listCourseIDs);\n                // console.log(\"courseID: \" + courseID);\n\n\n                if (mappedResults != undefined) {\n\n                    let resultsMaxDisplay = 5;\n                    \n                    // lower maximum results length if one specified is greater than what's possible\n                    if (resultsMaxDisplay > mappedResults.length)\n                        resultsMaxDisplay = mappedResults.length;\n\n                    /* DEBUG: list all info */\n                    // console.log(\"resultsMaxDisplay: \", resultsMaxDisplay)\n                    // console.log(\"mappedResults:\", mappedResults)\n                    // console.log(\"mappedResults.length: \", mappedResults.length)\n                    // console.log(\"mappedResults[0]: \" + mappedResults[0]);\n                    // console.log(\"mappedResults[0].course_id: \" + mappedResults[0].course_id);\n\n                    let i = 0;\n                    /* add recommended courseIDs to list by amount specified by resultsMaxDisplay*/\n                    while (courseIDsRecommended.length < resultsMaxDisplay && i < mappedResults.length) {\n                        // console.log(\"i: \", i);\n                        /* break if i is equal to the length of mappedResults */\n                        if (i >= mappedResults.length)\n                            break; \n\n                        let courseId = mappedResults[i].course_id;\n                        console.log(\"mappedResults:\", mappedResults);\n\n                        /* check if the courseId already exists in courseIDsRecommended */\n                        let doesNotExist = true;\n                        for (let j = 0; j < courseIDsRecommended.length; j++) {\n\n                            if (courseIDsRecommended[j] == courseId) {\n                                doesNotExist = false;\n                                break;\n                            }\n                        }\n\n                        /* push to recommended list if entry does not yet exist */\n                        if (doesNotExist) {\n                            courseIDsRecommended.push(courseId);\n                        }\n                        i++;\n                    }\n\n                }\n                else {\n                    courseIDsRecommended = [];\n                }\n               \n            }\n            else {\n                courseIDsRecommended = [];\n            }\n        }\n        else {\n            courseIDsRecommended = [];\n        }\n\n        return courseIDsRecommended;\n\n    }\n\n    \n\n    render() {\n\n        let currentInput = this.props.currentInput;\n\n        let listCourseIDs = this.props.listCourseIDs;\n\n        var recommendedCourseIDs = this.recommendSearch(listCourseIDs, currentInput);\n\n        console.log(\"recommendedCourseIDs: \" + recommendedCourseIDs);\n        \n        return(\n            <datalist id=\"recommendedCourseIDs\">\n                {recommendedCourseIDs.map(function (id) {\n                    return <option key={id} value={id} ></option>\n                })}\n            </datalist>\n        );\n    }\n\n}\nexport default CourseNameRecommendation;","/Users/dumbcan/Desktop/COMP20/Tufts-Schedule-React/frontend/src/components/views/OptionMainButton.js",[],"/Users/dumbcan/Desktop/COMP20/Tufts-Schedule-React/frontend/src/components/views/CourseSelected.js",["65"],"/*\n    Selected course\n    Created by Jeremy Jung\n*/\nimport React from 'react';\nimport style from './styles/CourseSelected.module.css';\n\nclass CourseSelected extends React.Component {\n    constructor(props) {\n        super(props);\n       \n    }\n\n    handleSubmit(event) {\n        //prevent default event handler\n        event.preventDefault();\n    }\n\n   \n\n    render() {\n       \n        return (\n        <div className={style.course}>\n            {this.props.courseID}\n        </div>\n        );\n      \n    }\n}\n\nexport default CourseSelected;","/Users/dumbcan/Desktop/COMP20/Tufts-Schedule-React/frontend/src/components/Event.js",[],{"ruleId":"66","replacedBy":"67"},{"ruleId":"68","replacedBy":"69"},{"ruleId":"70","severity":1,"message":"71","line":10,"column":22,"nodeType":"72","messageId":"73","endLine":10,"endColumn":28},{"ruleId":"70","severity":1,"message":"74","line":13,"column":5,"nodeType":"72","messageId":"73","endLine":13,"endColumn":9},{"ruleId":"70","severity":1,"message":"75","line":15,"column":8,"nodeType":"72","messageId":"73","endLine":15,"endColumn":16},{"ruleId":"70","severity":1,"message":"76","line":7,"column":8,"nodeType":"72","messageId":"73","endLine":7,"endColumn":13},{"ruleId":"70","severity":1,"message":"77","line":12,"column":8,"nodeType":"72","messageId":"73","endLine":12,"endColumn":9},{"ruleId":"78","severity":1,"message":"79","line":54,"column":44,"nodeType":"80","messageId":"81","endLine":54,"endColumn":46},{"ruleId":"78","severity":1,"message":"79","line":78,"column":27,"nodeType":"80","messageId":"81","endLine":78,"endColumn":29},{"ruleId":"78","severity":1,"message":"82","line":103,"column":69,"nodeType":"80","messageId":"81","endLine":103,"endColumn":71},{"ruleId":"70","severity":1,"message":"83","line":133,"column":13,"nodeType":"72","messageId":"73","endLine":133,"endColumn":28},{"ruleId":"70","severity":1,"message":"84","line":182,"column":17,"nodeType":"72","messageId":"73","endLine":182,"endColumn":20},{"ruleId":"85","severity":1,"message":"86","line":11,"column":5,"nodeType":"87","messageId":"88","endLine":13,"endColumn":6},{"ruleId":"78","severity":1,"message":"79","line":29,"column":22,"nodeType":"80","messageId":"81","endLine":29,"endColumn":24},{"ruleId":"78","severity":1,"message":"79","line":32,"column":29,"nodeType":"80","messageId":"81","endLine":32,"endColumn":31},{"ruleId":"78","severity":1,"message":"79","line":40,"column":35,"nodeType":"80","messageId":"81","endLine":40,"endColumn":37},{"ruleId":"78","severity":1,"message":"82","line":70,"column":57,"nodeType":"80","messageId":"81","endLine":70,"endColumn":59},{"ruleId":"85","severity":1,"message":"86","line":9,"column":5,"nodeType":"87","messageId":"88","endLine":12,"endColumn":6},"no-native-reassign",["89"],"no-negated-in-lhs",["90"],"no-unused-vars","'Router' is defined but never used.","Identifier","unusedVar","'Link' is defined but never used.","'Calendar' is defined but never used.","'Popup' is defined but never used.","'e' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Expected '===' and instead saw '=='.","'selectedCourses' is assigned a value but never used.","'pop' is defined but never used.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","no-global-assign","no-unsafe-negation"]
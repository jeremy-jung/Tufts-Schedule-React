[{"/Users/jang-hojung/schedulefront/frontend/src/index.js":"1","/Users/jang-hojung/schedulefront/frontend/src/components/views/scripts/fb.js":"2","/Users/jang-hojung/schedulefront/frontend/src/App.js":"3","/Users/jang-hojung/schedulefront/frontend/src/components/Event.js":"4","/Users/jang-hojung/schedulefront/frontend/src/components/Schedule.js":"5","/Users/jang-hojung/schedulefront/frontend/src/components/Homepage.js":"6","/Users/jang-hojung/schedulefront/frontend/src/components/views/ButtonFBLogin.js":"7","/Users/jang-hojung/schedulefront/frontend/src/components/views/CourseNameRecommendation.js":"8","/Users/jang-hojung/schedulefront/frontend/src/components/views/Popup.js":"9","/Users/jang-hojung/schedulefront/frontend/src/components/views/CoursesSelectedList.js":"10","/Users/jang-hojung/schedulefront/frontend/src/components/views/calendars/Week.js":"11","/Users/jang-hojung/schedulefront/frontend/src/components/views/CourseSelected.js":"12","/Users/jang-hojung/schedulefront/frontend/src/components/views/calendars/Day.js":"13","/Users/jang-hojung/schedulefront/frontend/src/components/views/calendars/Event.js":"14","/Users/jang-hojung/schedulefront/frontend/src/components/views/CourseDetailPop.js":"15"},{"size":377,"mtime":1610242619871,"results":"16","hashOfConfig":"17"},{"size":1237,"mtime":1610322954042,"results":"18","hashOfConfig":"17"},{"size":824,"mtime":1610322954038,"results":"19","hashOfConfig":"17"},{"size":805,"mtime":1610231466566,"results":"20","hashOfConfig":"17"},{"size":2383,"mtime":1610558231460,"results":"21","hashOfConfig":"17"},{"size":22615,"mtime":1618417492547,"results":"22","hashOfConfig":"17"},{"size":2823,"mtime":1610322954041,"results":"23","hashOfConfig":"17"},{"size":4124,"mtime":1610231466575,"results":"24","hashOfConfig":"17"},{"size":1868,"mtime":1610730169811,"results":"25","hashOfConfig":"17"},{"size":3470,"mtime":1618417492549,"results":"26","hashOfConfig":"17"},{"size":12882,"mtime":1618761748983,"results":"27","hashOfConfig":"17"},{"size":1701,"mtime":1610730169807,"results":"28","hashOfConfig":"17"},{"size":7991,"mtime":1616616241719,"results":"29","hashOfConfig":"17"},{"size":3482,"mtime":1616616253871,"results":"30","hashOfConfig":"17"},{"size":1941,"mtime":1612129439778,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"gn4ll5",{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"34"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"34"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"34"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"34"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"34"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"34"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/jang-hojung/schedulefront/frontend/src/index.js",[],["69","70"],"/Users/jang-hojung/schedulefront/frontend/src/components/views/scripts/fb.js",[],"/Users/jang-hojung/schedulefront/frontend/src/App.js",["71"],"/* \n    Main react app \n    Created by Jeremy Jung\n*/\nimport React from 'react';\nimport Homepage from \"./components/Homepage.js\";\nimport Schedule from \"./components/Schedule.js\";\n\nimport {\n    Switch,\n    Route\n} from \"react-router-dom\";\nimport Calendar from './components/Event.js';\n\nexport default class App extends React.Component {\n\n    render() {\n        return (\n            <div>\n                {/* A <Switch> looks through its children <Route>s and\n        renders the first one that matches the current URL. */}\n                <Switch>\n                    <Route path=\"/schedule\">\n                        <Schedule />\n                    </Route>\n                    <Route path=\"/\">\n                        <Homepage />\n                    </Route>\n                </Switch>\n            </div>\n        );\n    }\n}","/Users/jang-hojung/schedulefront/frontend/src/components/Event.js",[],"/Users/jang-hojung/schedulefront/frontend/src/components/Schedule.js",[],"/Users/jang-hojung/schedulefront/frontend/src/components/Homepage.js",["72","73","74","75","76","77","78","79","80","81","82","83"],"/*\n    Pages: Home page\n    Created by Jeremy Jung, Duncan Chang\n*/\n\nimport React from 'react';\nimport CoursesSelectedList from './views/CoursesSelectedList.js';\nimport CourseNameRecommendation from './views/CourseNameRecommendation.js';\nimport style from './views/styles/Homepage.module.css';\nimport csStyle from './views/styles/CourseSchedule.module.css';\nimport Popup from './views/Popup.js';\nimport Week from './views/calendars/Week.js'\n\n/* scripts */\n\nclass Homepage extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            listCourseIDs: null, // all course IDs in semester catalog (mapped first letter)\n            currentInput: null,\n            recommendedCourseIDs: null,\n            selectedCourses: [], // courses added to list\n            checkSameID: true, // if courses returned from API has same couresID\n            popUp: false, // the state of popUp\n            popMap: [],\n            alertMessage: \"***\", \n            renderSchedule: false,\n            modifySearch: false, // true after render scheduled, false when user is able to add course on spot\n            eventInfo: [], // parsed JSON of event info from post request\n            drag: false, // if drag view is selected\n            dragAbove: false,\n            dayTimePref: {\"Monday\":[], \"Tuesday\":[],\"Wednesday\":[], \"Thursday\":[],\"Friday\":[], \"Saturday\":[],\"Sunday\":[] }, // stores the pref time in int\n            postReqTime: {\"Monday\":[], \"Tuesday\":[],\"Wednesday\":[], \"Thursday\":[],\"Friday\":[], \"Saturday\":[],\"Sunday\":[] }, // stores the pref time in proper json format\n            noTimeCourse: [],\n            showNoTimeCourse: false,\n        }\n\n\n        this.handleAdd = this.handleAdd.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n        this.setMessage = this.setMessage.bind(this);\n        this.updateSelectedPop = this.updateSelectedPop.bind(this);\n        this.closeModifySearch = this.closeModifySearch.bind(this);\n        this.handleCheckInclude = this.handleCheckInclude.bind(this);\n        this.sortTimePref = this.sortTimePref.bind(this);\n        this.handleReload = this.handleReload.bind(this);\n        /* this.showUnscheduled = this.showUnscheduled.bind(this); */\n    }   \n\n    /*\n     * handleCheckID\n     * checks if user is entering a valid courseID.\n     * effect: sets checkSameID to false if multiple courses with different ID \n     *          is found, meaning that the user hasn't entered the exact courseID\n     */\n    handleCheckID(mappedResults) {\n        // Debug purpose\n        console.log(\"mappedResults length: \" + mappedResults.length);\n        console.log(\"checkSameID: \" + this.state.checkSameID);\n        console.log(mappedResults[0]);\n        // console.log(mappedResults[1]);\n        // console.log(mappedResults[0].course_id == mappedResults[1].course_id);\n\n        \n        let checkID = mappedResults[0].course_id;\n\n        // checks if the user input is a valid courseID\n        for (var i = 0; i < mappedResults.length; i++)\n        {\n            console.log(this.state.checkSameID);\n            console.log(\"the length of mappedReusults:\" + mappedResults.length);\n            if (mappedResults[i].course_id !== checkID)\n            {\n                console.log(\"it went in here\");\n                // prevent user from adding incomplete course ID \n                this.setState({\n                    checkSameID: false\n                })\n                break;\n            }\n            console.log(this.state.checkSameID);\n\n        }\n\n    }\n\n    handleCheckInclude(mappedResult) {\n        this.state.selectedCourses.map(function(course) {\n            if (JSON.stringify(mappedResult) === JSON.stringify(course))\n            {\n                console.log(\"mappedResult: \" , mappedResult);\n                console.log(\"course: \" , course);\n                console.log(\"equal? \" , JSON.stringify(mappedResult) === JSON.stringify(course));\n                return true;\n            }\n        })\n        return false;\n    }\n\n    // handles the add function. prevents user from adding non-existing courseID\n    async handleAdd(event) {\n\n        await this.setMessage(\"***\");\n\n        console.log(\"the beginning state: \" + this.state.checkSameID);\n        //prevent default event handler\n        event.preventDefault();\n        let nameField = document.getElementById(\"input\");\n        let mappedResults = this.state.listCourseIDs[this.state.currentInput];\n\n        // checks if user input is valid\n        if (mappedResults !== undefined)\n        {\n            // resets the state of popUp\n            this.setState({\n                popUp: false,\n            })\n            // needs checkSameID to be up to date. always.\n            await this.handleCheckID(mappedResults);\n\n            // This if is to check if Popup is needed\n            if(this.state.checkSameID && mappedResults.length > 1)\n            {\n                this.setState({\n                    popUp: true,\n                    popMap: mappedResults,\n                })\n            }\n            // checks if a course has been added\n            else if (this.state.checkSameID && (this.state.selectedCourses.includes(mappedResults[0])))\n            {\n                await this.setMessage(\"** This course has already been added! **\");\n            }\n            // adds that one course to list\n            else if (this.state.checkSameID && mappedResults.length === 1)\n            {\n                console.log(\"check multt add before\" , mappedResults);\n                console.log(\"check selectedcourses add before\" , this.state.selectedCourses);\n                console.log(\"check include again \" , (this.state.selectedCourses.includes(mappedResults[0])))\n\n                // let name = this.state.currentInput.toUpperCase(); // get user input\n                let courseToAdd = mappedResults[0];\n                // UPDATE STATE selectedCourses \n                var arrayJoined = this.state.selectedCourses.concat(courseToAdd);\n                await this.setState({ selectedCourses: arrayJoined });\n                console.log(\"check selectedcourses add after\" , this.state.selectedCourses);\n\n                nameField.value = \"\";\n            }\n            else{\n                console.log(\"here 2\");\n                console.log(\"alerts here\");\n                // resets the state\n                this.setState({\n                    checkSameID: true,\n                })\n                await this.setMessage(\"** Please enter a VALID COURSE ID! **\");\n            }\n        }\n        // if user input is invalid\n        else{\n            await this.setMessage(\"** Please enter a VALID COURSE ID! **\");\n\n        }\n        \n        \n    }\n\n    /*  \n     *  closePop()\n     *  a callback function by Popup.js's closing div (x)\n     *  manages the state of whether a Popup should be shown\n     *  resets the state of popUp\n     */ \n    closePop()\n    {\n        this.setState({\n            popUp: false\n        })\n    }\n   \n    /*  \n     *  updateSelectedPop()\n     *  manages actions if a course is selected from Popup\n     *  adds course to courselist \n     */ \n    async updateSelectedPop(popSelected)\n    {\n        console.log(\"close: \" + popSelected);\n        // checks if popUp should be shown, and if selected course was previously added\n        if (this.state.popUp && !this.state.selectedCourses.includes(popSelected))\n        {\n            \n            var arrayJoined = this.state.selectedCourses.concat(popSelected);\n            console.log(\"test: \" , popSelected);\n            this.setState({ \n                selectedCourses: arrayJoined,\n                popUp: false \n            });\n            document.getElementById(\"input\").value = \"\";\n        }\n        else if (this.state.popUp){\n            console.log(\"this alert\");\n            await this.setMessage(\"** This Course Has Already Been Added! **\");\n        }\n        else{\n            document.getElementById(\"input\").value = \"\";\n            this.setMessage(\"***\");\n        }\n        \n        \n        \n    }\n    /*  \n     *  setMessage()\n     *  changes the message in div when called using {message}\n     *  sets the state of alertMessage \n     */ \n    setMessage(message){\n        this.setState({\n            alertMessage: message,\n        })\n        \n    }\n\n    handleGenerate() {\n        \n        var selectedCourses = this.state.selectedCourses;\n        console.log(\"handling generate\");\n        console.log(\"selectedCourses: \", selectedCourses);\n    }\n\n    componentDidMount() {\n        // initialize {listCourseIDs} in this component's state\n        this.getListCourseIDs();\n  \n\n    }\n    \n    async getListCourseIDs() {\n        var API_URL = process.env.REACT_APP_API_URL + \"/courses/alg/search-table\";\n        fetch(API_URL)\n            .then(\n                (response) => response.json()\n            )\n            .then(result => {\n                //if the request is valid\n                this.setState({\n                    listCourseIDs: result.data,\n                });\n            },\n            (error) => {\n                console.log(\"error\", error);\n        });\n    }\n\n\n\n    /* CourseID input scripts */\n\n    // todo: link\n    handleChange() {\n        console.log(\"handling change\");\n        let nameField = document.getElementById(\"input\");\n        let name = nameField.value.toLowerCase(); // get user input\n        this.setState((state) => ({ currentInput: name })); // update state (currentInput)\n        \n    }\n\n    /*  \n     *  removeCourse(item)\n     *  deletes the course specified (passed in as \"item\") \n     *  looks through selectedCourses, finds, then delete\n     */ \n    async removeCourse(item) {\n        \n        var res = this.state.selectedCourses;\n        // look for the index and remove\n        for (var i = 0 ; i < this.state.selectedCourses.length; i++)\n        {\n            if (this.state.selectedCourses[i] === item)\n            {\n                delete res[i]\n                await this.setState({\n                    selectedCourses: res,\n                })\n                break;\n            }\n        }\n\n    }\n    async handleSchedule(check) {\n        await this.setState({\n            renderSchedule: check,\n            modifySearch: check,\n        })\n        console.log(\"schedule called\");\n        console.log(this.state.renderSchedule);\n        await this.getListCourseIDs();\n        console.log(\"called rerender\");\n        this.convertSchedulePref();\n        await this.setState({\n            renderSchedule:false,\n        })\n        await this.setState({\n            renderSchedule:true,\n        })\n        // runs post request \n        // await this.getRecSchedule();\n    }\n\n\n    async closeModifySearch(){\n        await this.setState({\n            modifySearch: false,\n        })\n    }\n\n    async storeTimePref(timePref)\n    {\n        await this.setState({            \n            dayTimePref: timePref,\n        })\n\n    }\n\n    async sortTimePref()\n    {\n        console.log(\"called here from HOME\");\n        for (var key in this.state.dayTimePref) {\n            console.log(\"try print sort: \" , this.state.dayTimePref[key].sort());\n            this.state.dayTimePref[key] = this.state.dayTimePref[key].sort();\n            \n            console.log(\"HOME - sorted: \" , this.state.dayTimePref[key]);\n        }\n    }\n\n    convertTimeIntToString(time)\n    {\n        var hours = Math.trunc(time / 100);\n        var minutes = time % 100 + hours * 60;\n        console.log(\"minutes with hour: \" , minutes);\n        hours = Math.trunc(minutes / 60);\n        minutes = minutes % 60;\n        console.log(\"intToString - time: \" , time , \" hour: \", hours, \" minute: \" , minutes);\n        var hourString = \"\" + hours;\n        var minuteString = \"\" + minutes;\n        if (hours < 10)\n        {\n            hourString = \"0\" + hours;\n        }\n        if (minutes < 10)\n        {\n            minuteString = \"0\" + minutes;\n        }\n\n        return hourString + \":\" + minuteString;\n\n    }\n\n    // converts all int time pref to string and push in json\n    convertSchedulePref() {\n        for (var key in this.state.dayTimePref) {\n            /* reset all to empty */\n            this.state.postReqTime[key] = [];\n            // check if it's empty, empty -> 00:00 to 23:59\n            if (this.state.dayTimePref[key].length == 0)\n            {\n                this.state.postReqTime[key].push({\n                    \"time_earliest\": \"00:00\",\n                    \"time_latest\": \"23:59\"\n                });\n            }\n            else if (this.state.dayTimePref[key].length == 1)\n            {\n                var begin = this.state.dayTimePref[key][0];\n                var end = this.state.dayTimePref[key][0] + 30;\n                \n                this.state.postReqTime[key].push({\n                    \"time_earliest\": this.convertTimeIntToString(begin),\n                    \"time_latest\": this.convertTimeIntToString(end)\n                });\n            }\n            else {\n                var begin = this.state.dayTimePref[key][0];\n                for (var i = 1; i < this.state.dayTimePref[key].length; i++)\n                {\n                    // if the time is not consecutive from previous\n                    console.log(\"prev: \", this.state.dayTimePref[key][i-1], \" current: \", this.state.dayTimePref[key][i]);\n                    if ((this.state.dayTimePref[key][i - 1] + 30) != (this.state.dayTimePref[key][i]))\n                    {\n                        this.state.postReqTime[key].push({\n                            \"time_earliest\": this.convertTimeIntToString(begin),\n                            \"time_latest\": this.convertTimeIntToString(this.state.dayTimePref[key][i - 1] + 30)\n                        });\n                        begin = this.state.dayTimePref[key][i];\n                        // if time is the end, and not consecutive from previous\n                        if (i == (this.state.dayTimePref[key].length - 1))\n                        {\n                            this.state.postReqTime[key].push({\n                                \"time_earliest\": this.convertTimeIntToString(begin),\n                                \"time_latest\": this.convertTimeIntToString(begin + 30)\n                            });\n                        }\n                    }\n                    // if time is consecutive, but last\n                    else if (i == (this.state.dayTimePref[key].length - 1))\n                    {\n                        this.state.postReqTime[key].push({\n                            \"time_earliest\": this.convertTimeIntToString(begin),\n                            \"time_latest\": this.convertTimeIntToString(this.state.dayTimePref[key][i] + 30)\n                        });\n                    }\n                    \n                }\n            }\n            \n\n            \n            \n        }\n    }\n\n    async handleReload() \n    {\n        this.setState({\n            drag: !this.state.drag,\n        })\n        if (this.state.drag) {\n            await this.sortTimePref();\n            await this.convertSchedulePref();\n            this.handleSchedule(true);\n\n        }\n    }\n\n    showUnscheduled = (show, courses) => {\n        console.log(\"showUnscheduled is called \", show, courses);\n        if (show) {\n            this.setState({\n                noTimeCourse: courses,\n                showNoTimeCourse: true,\n            })\n            /* this.state.noTimeCourse = courses; */\n            console.log(\"unscheduled courses? \" , this.state.noTimeCourse);\n            /* this.state.showNoTimeCourse = true; */\n\n        }\n        else {\n            this.state.noTimeCourse =[];\n            console.log(\"unscheduled courses? \", this.state.noTimeCourse);\n            this.state.showNoTimeCourse = false;\n        }\n    }\n\n    render() {\n        console.log(\"HOMEPAGE: daytimepref: \", this.state.dayTimePref);\n        const {showNoTimeCourse, NoTimeCourse} = this.state;\n        /* asynchronously render home page after getting courseIDs*/\n        if (this.state.listCourseIDs == null) {\n            // render loading state...\n            return (\n                <div className={style.loadContainer}>\n                    Loading...\n                </div>\n            );\n        }\n        else {\n            // render real UI..\n            return (\n\n                <div className={csStyle.csContainer}>\n                    {/* part 1 header logo and stuff  */}\n                    <header >\n                        <h1>Schedule Planner</h1>\n                        <br/>\n                        <br/>\n                    </header>\n    \n                    {/* part 2 the rest goes in flex column */}\n                    <div className={csStyle.columnContainer}>\n                        <div className={csStyle.searchContainer}>\n                                {this.state.modifySearch ? \n    \n                                    // the modify search button\n                                    <input className={csStyle.courseSubmit} type=\"button\" value=\"Modify List\" onClick={this.closeModifySearch} /> :\n    \n                                    // or the input field that allows user to add courses\n                                    <div className={csStyle.inputContainer}>\n    \n    \n                                        {/* handles the add course form */}\n                                        <form onSubmit={this.handleAdd}>\n                                            \n                                            {/* input text field and search rec droplist */}\n                                            <div>\n                                                <input className={csStyle.courseInput} onChange={this.handleChange} list='recommendedCourseIDs' id=\"input\" type=\"text\" autoComplete=\"off\" placeholder=\"CS-0015\" />\n                                                \n                                                <CourseNameRecommendation \n                                                    listCourseIDs = {this.state.listCourseIDs} \n                                                    currentInput = {this.state.currentInput}>\n                                                </CourseNameRecommendation>\n                                            </div>\n                                            &nbsp;\n                                            {/* add button */}\n                                            {this.state.popUp ? \n                                                // popup for courses of same id but diff names\n                                                <Popup \n                                                    popMap={this.state.popMap} \n                                                    updateSelectedPop={this.updateSelectedPop.bind(this)} \n                                                    closePop={this.closePop.bind(this)} \n                                                    setMessage={this.setMessage.bind(this)}  >\n                                                </Popup> : \n    \n                                                // or just the add button\n                                                <input className={csStyle.courseAdd} type=\"submit\" value=\"Add\" />\n                                            }\n    \n                                        </form>\n    \n                                        <br/>\n    \n                                        {/* the alert message */}\n                                        {(this.state.alertMessage.localeCompare(\"***\"))? <div className={csStyle.alert} id=\"alert\">{this.state.alertMessage}</div> : <div className={style.noAlert} id=\"alert\">{this.state.alertMessage}</div>}\n                                        \n                                    </div>\n                                \n                                }\n\n                            {this.state.showNoTimeCourse ? \n                                <div className={csStyle.unscheduledBox}> \n                                    <div type=\"text\" value=\"Course Time Unspecified\" className={csStyle.unscheduledBoxTitle}>Course Time Unspecified</div>\n                                    {this.state.noTimeCourse.map(function (course){\n                                        console.log(\"course from unscheduled: \" , course);\n                                        return <div className={csStyle.unscheduled}>{course.details + \" \" + course.name}</div>\n                                    }, this)}\n                                </div>\n                                :\n                                <p></p>\n                            }\n                           \n\n\n                            {/* part 2-1 the selected courses block */}\n                            <CoursesSelectedList \n                                handleGenerate = {this.handleGenerate.bind(this)} \n                                selectedCourses={this.state.selectedCourses} \n                                listCourseIDs = {this.state.listCourseIDs} \n                                popUp={this.state.popUp} \n                                removeCourse={this.removeCourse.bind(this)} \n                                setMessage={this.setMessage.bind(this)} \n                                handleSchedule={this.handleSchedule.bind(this)}>\n                            </CoursesSelectedList>\n    \n    \n    \n                        </div>\n                        \n    \n                        {/* part 2-2 flex row the search input and calendar */}\n                        <div className={csStyle.verticalContainer}>\n                            \n                            <br/>\n                            {this.state.renderSchedule ? <input type=\"button\" className={csStyle.timePref} value={this.state.drag ? \"View Schedule\" : \"Edit Time Preference\"} onClick={()=> this.handleReload()}/> : <br></br>}\n                            <br/>\n                            {this.state.renderSchedule ? <Week courseSchedule={true} selectedCourses={this.state.selectedCourses} eventInfo={this.state.eventInfo} drag={false} dayTimePref={this.state.dayTimePref} postReqTime={this.state.postReqTime} showUnscheduled={this.showUnscheduled.bind(this)}></Week> : <p></p>}\n                            {this.state.drag ? <Week courseSchedule={true} selectedCourses={this.state.selectedCourses} eventInfo={{}} drag={true} storeTimePref={() => this.storeTimePref.bind(this)} dayTimePref={this.state.dayTimePref}></Week> : <div></div>}\n    \n    \n                        </div>\n    \n    \n    \n                    </div>\n                    \n    \n    \n    \n    \n                </div>\n            \n            );\n        }\n    }\n}\n\nexport default Homepage;","/Users/jang-hojung/schedulefront/frontend/src/components/views/ButtonFBLogin.js",[],"/Users/jang-hojung/schedulefront/frontend/src/components/views/CourseNameRecommendation.js",["84","85","86","87"],"/*\n    Drop down list of course name suggestions\n    Created by Jeremy Jung\n*/\n\nimport React from 'react';\n//import style from './styles/CourseNameRecommendation.module.css';\n\n\nclass CourseNameRecommendation extends React.Component {\n    \n    constructor (props) {\n        super(props);\n        console.log(\"render\");\n\n        this.state = {\n            recommendedCourseIDs: null,\n\n        }\n    }\n\n    // O(k) where k is length of courseID\n    // courseID is the user input\n    // listCourseIDs takes in the courseID\n    recommendSearch (listCourseIDs, courseID) {\n        var courseIDsRecommended = [];\n        let mappedResults = [];\n\n        if (courseID != undefined || courseID != null) {\n\n            // recommend if there is at least one character in input\n            if (courseID[0] != undefined) {\n\n                // mapperResults is an array of \"matched\" courses (from API) by the user input \n                mappedResults = listCourseIDs[courseID];\n                // console.log(\"listCourseIDs: \" + listCourseIDs);\n                // console.log(\"courseID: \" + courseID);\n\n\n                if (mappedResults != undefined) {\n\n                    let resultsMaxDisplay = 5;\n                    \n                    // lower maximum results length if one specified is greater than what's possible\n                    if (resultsMaxDisplay > mappedResults.length)\n                        resultsMaxDisplay = mappedResults.length;\n\n                    /* DEBUG: list all info */\n                    // console.log(\"resultsMaxDisplay: \", resultsMaxDisplay)\n                    // console.log(\"mappedResults:\", mappedResults)\n                    // console.log(\"mappedResults.length: \", mappedResults.length)\n                    // console.log(\"mappedResults[0]: \" + mappedResults[0]);\n                    // console.log(\"mappedResults[0].course_id: \" + mappedResults[0].course_id);\n\n                    let i = 0;\n                    /* add recommended courseIDs to list by amount specified by resultsMaxDisplay*/\n                    while (courseIDsRecommended.length < resultsMaxDisplay && i < mappedResults.length) {\n                        // console.log(\"i: \", i);\n                        /* break if i is equal to the length of mappedResults */\n                        if (i >= mappedResults.length)\n                            break; \n\n                        let courseId = mappedResults[i].course_id;\n                        console.log(\"mappedResults:\", mappedResults);\n\n                        /* check if the courseId already exists in courseIDsRecommended */\n                        let doesNotExist = true;\n                        for (let j = 0; j < courseIDsRecommended.length; j++) {\n\n                            if (courseIDsRecommended[j] == courseId) {\n                                doesNotExist = false;\n                                break;\n                            }\n                        }\n\n                        /* push to recommended list if entry does not yet exist */\n                        if (doesNotExist) {\n                            courseIDsRecommended.push(courseId);\n                        }\n                        i++;\n                    }\n\n                }\n                else {\n                    courseIDsRecommended = [];\n                }\n               \n            }\n            else {\n                courseIDsRecommended = [];\n            }\n        }\n        else {\n            courseIDsRecommended = [];\n        }\n\n        return courseIDsRecommended;\n\n    }\n\n    \n\n    render() {\n\n        let currentInput = this.props.currentInput;\n\n        let listCourseIDs = this.props.listCourseIDs;\n\n        var recommendedCourseIDs = this.recommendSearch(listCourseIDs, currentInput);\n\n        console.log(\"recommendedCourseIDs: \" + recommendedCourseIDs);\n        \n        return(\n            <datalist id=\"recommendedCourseIDs\">\n                {recommendedCourseIDs.map(function (id) {\n                    return <option key={id} value={id} ></option>\n                })}\n            </datalist>\n        );\n    }\n\n}\nexport default CourseNameRecommendation;","/Users/jang-hojung/schedulefront/frontend/src/components/views/Popup.js",[],"/Users/jang-hojung/schedulefront/frontend/src/components/views/CoursesSelectedList.js",["88"],"/*\n    List containing selected selected courses represented by {CourseSelected}\n    Created by Jeremy Jung, Duncan Chang\n*/\n\nimport React from 'react';\nimport style from './styles/CoursesSelectedList.module.css';\nimport CourseSelected from './CourseSelected.js';\n\nimport {\n    Link\n} from \"react-router-dom\";\n\nclass CoursesSelectedList extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            listCourseIDs: this.props.listCourseIDs,\n            coursePopDetail: false,\n            schedulePage: false,\n        }\n\n        this.handleGenerate = this.handleGenerate.bind(this);\n\n    }\n\n    async handlePop()\n    {\n        console.log(\"coursePopDetail before: \" , this.state.coursePopDetail);\n\n        await this.setState({\n            coursePopDetail: true,\n        })\n        console.log(\"coursePopDetail after: \" , this.state.coursePopDetail);\n    }\n    \n    async closePop()\n    {\n        await this.setState({\n            coursePopDetail: false,\n        })\n    }\n\n    async scheduleCondition(){\n        if (this.props.selectedCourses.length > 0)\n        {\n            await this.setState({\n                schedulePage: true,\n            })\n        }\n    }\n\n    // async removeCourse(item)\n    // {\n    //     await this.props.removeCourse(item);\n    // }\n\n    async handleGenerate() {\n        await this.scheduleCondition();\n\n        if (this.state.schedulePage)\n        {\n            this.props.handleGenerate();\n            // calls this from props and post request rec schedule\n            this.props.handleSchedule(true);\n        }\n        else \n        {\n            this.props.setMessage(\"*** Please Add Course to List ***\");\n        }\n    }\n\n    render() {\n      \n        \n        console.log(\"my seleceted courses: \" , this.props.selectedCourses);\n        let containerClass;\n        // checks which css class the container should follow\n        if (this.state.coursePopDetail)\n        {\n            containerClass = false;\n        }\n        else\n        {\n            containerClass = this.props.popUp;\n        }\n        \n        console.log(\"test this: \" , this.state.coursePopDetail);\n        console.log(\"containerClass: \", containerClass);\n        return (\n            <div className = {containerClass ? style.popContainer : style.container}id = \"coursesSelectedList\">\n                {/* <h2>Your selected courses</h2> */}\n                <br/>\n                <div className={this.state.coursePopDetail ? style.popCourseList : style.courseList}>\n                    <div className={style.courseListTitle}>Selected Courses</div>\n                    {this.props.selectedCourses.map(function (courseInfo) {\n                        return <CourseSelected courseInfo = {courseInfo} pop={false} handlePop = {this.handlePop.bind(this)} closePop= {this.closePop.bind(this)} coursePopDetail = {this.state.coursePopDetail} removeCourse={this.props.removeCourse}></CourseSelected>\n                    }, this)}\n                </div>\n                <br/>\n\n                <input type=\"button\" value=\"Render Schedule\" className = {this.state.coursePopDetail ? style.popButton : style.button} onClick={this.handleGenerate}/>\n                {/* <Link className = {this.state.coursePopDetail ? style.popButton : style.button} onClick = {this.props.handleGenerate} to = \"/schedule\">\n                    Schedule\n                </Link> */}\n            </div>\n        );\n    }\n}\n\nexport default CoursesSelectedList;","/Users/jang-hojung/schedulefront/frontend/src/components/views/calendars/Week.js",["89","90","91","92","93","94","95","96"],"/Users/jang-hojung/schedulefront/frontend/src/components/views/CourseSelected.js",[],"/Users/jang-hojung/schedulefront/frontend/src/components/views/calendars/Day.js",["97","98","99","100","101","102","103","104","105","106","107","108","109"],"\nimport React from 'react';\nimport dayStyle from './calendarStyles/Day.module.css'\nimport Event from './Event.js'\n\n\nclass Day extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            dow: this.props.dow,\n            timeSlots: [],\n            courseSchedule: this.props.courseSchedule,\n            events: this.props.events,\n            startTime: \"\",\n            endTime: \"\",\n        };\n\n        this.generateTime = this.generateTime.bind(this);\n        this.createTimeSlots = this.createTimeSlots.bind(this);\n        this.onDrag = this.onDrag.bind(this);\n        this.onDragEnter = this.onDragEnter.bind(this);\n        this.createTimeSlots();\n        console.log(\"events of \" , this.state.dow , \" : \" , this.state.events);\n    }\n\n \n\n    generateTime(pos) { \n        let check = pos % 4;\n        let res = \"\";\n        if (check == 0) \n        {\n            res = Math.floor(pos / 4) + \":00\";\n        }\n        else if (check == 1)\n        {\n            res = Math.floor(pos / 4) + \":15\";        \n        }\n        else if (check == 2) \n        {\n            res = Math.floor(pos / 4) + \":30\";\n        }\n        else if (check == 3) \n        {\n            res = Math.floor(pos / 4) + \":45\";\n        }\n\n        // add \"0\" accordingly\n        if (res.length != 5)\n        {\n            res = \"0\" + res;\n        }\n        \n        return res;\n    }\n\n    async createTimeSlots() {\n        var tempSlots = [];\n        let star = 0;\n        let end = 96;\n        // if rendering time slots for course schedule, just need to show 7:30 - 23:00\n        // 4 time slots per hour \n        if (this.state.courseSchedule)\n        {\n            star = 29;\n            end = 95;\n        }\n        for (var i = star; i < end; i++)\n        {\n            this.state.timeSlots.push({\n                start: this.generateTime(i),\n                end: this.generateTime(i + 1),\n                busy: false,\n\n            });\n        }\n     \n        \n    }\n\n    onDrag(st){\n        this.setState({\n            startTime: st,\n        })\n        console.log(\"ondrag starts\");\n    }\n\n\n    async onDragEnter(e, et) \n    {\n        this.setState({\n            endTime: et,\n        })\n        var res = et.split(\":\");\n        res = parseInt(res[0] + res[1]);\n        if (e.target.style.backgroundColor.localeCompare(\"\") == 0)\n        {\n            e.target.style.backgroundColor = \"#FFE066\";\n            console.log(\"the props: \" , this.props);\n            await this.props.dayUpdateTimePref(this.state.dow, res, true);\n\n        }\n        else\n        {\n            e.target.style.backgroundColor = \"\";\n            await this.props.dayUpdateTimePref(this.state.dow, res, false);\n\n        }\n        console.log(\"check style of event: \" , e.target.style);\n        console.log(\"check res: \" , res);\n    }\n\n\n\n\n    render() {\n        // for the time column\n        if (this.props.timeBar)\n        {\n            return (\n                <div className={dayStyle.timeBarContainer}>\n                    <div className={dayStyle.timeSlots}>\n                        <div className={dayStyle.timeSlotTop}>\n                            <h3>&nbsp;</h3>\n                        </div>\n                        \n                        {this.state.timeSlots.map(function (timeInfo) { \n                            if (timeInfo.start.substring(3) == \"00\")\n                                return  <div className={dayStyle.timeSlotTop} value={timeInfo.start}>{timeInfo.start}</div>;\n                            else if (timeInfo.start.substring(4) == \"0\")\n                                return <div className={dayStyle.timeSlot} value={timeInfo.start}>&nbsp;</div>;\n                            else    \n                                return <div className={dayStyle.slot} value={timeInfo.start}></div>;\n                        })}\n                    </div>\n                    \n                </div>\n            )\n        }\n        // for the drag display\n        else if (this.state.events == null)\n        {\n            return (\n                <div className={dayStyle.dragDayContainer}>\n                    <div className={dayStyle.timeSlots}>\n                        <div className={dayStyle.timeSlotTop}>\n                            <h3>{this.state.dow.substring(0, 3)}</h3>\n                        </div>\n                        \n                        {this.state.timeSlots.map(function (timeInfo) {\n                            var res = timeInfo.start.split(\":\");\n                            res = parseInt(res[0] + res[1]); \n                            if (timeInfo.start.substring(3) == \"00\")\n                            {\n                                if (this.props.dayTimePref[this.state.dow].includes(res))\n                                {\n                                    return <div className={dayStyle.timeSlotTop} style={{backgroundColor:\"#FFE066\"}} value={timeInfo.start} draggable={true} onDrag={()=>this.onDrag(timeInfo.start)} onDragEnter={(e)=>this.onDragEnter(e, timeInfo.start)} onClick={(e)=>this.onDragEnter(e, timeInfo.start)}>&nbsp;</div>;                    \n                                }\n                                return  <div className={dayStyle.timeSlotTop} value={timeInfo.start} draggable={true} onDrag={()=>this.onDrag(timeInfo.start)} onDragEnter={(e)=>this.onDragEnter(e, timeInfo.start)} onClick={(e)=>this.onDragEnter(e, timeInfo.start)}>&nbsp;</div>;                    \n\n                            }\n                            else if (timeInfo.start.substring(4) == \"0\")\n                            {\n                                if (this.props.dayTimePref[this.state.dow].includes(res))\n                                {\n                                    return <div className={dayStyle.timeSlotTop} style={{backgroundColor:\"#FFE066\"}} value={timeInfo.start} draggable={true} onDrag={()=>this.onDrag(timeInfo.start)} onDragEnter={(e)=>this.onDragEnter(e, timeInfo.start)} onClick={(e)=>this.onDragEnter(e, timeInfo.start)}>&nbsp;</div>;                    \n                                }\n                                return  <div className={dayStyle.timeSlot} value={timeInfo.start} draggable={true} onDrag={()=>this.onDrag(timeInfo.start)} onDragEnter={(e)=>this.onDragEnter(e, timeInfo.start)} onClick={(e)=>this.onDragEnter(e, timeInfo.start)}>&nbsp;</div>;\n\n                            }\n                            else\n                                return <div className={dayStyle.slot} value={timeInfo.start}></div>;\n                        }, this )}\n    \n                    </div>\n                    \n    \n    \n                </div>\n                )\n        }\n        // for display of schedule with events \n        else \n        {\n            return (\n            <div className={dayStyle.dayContainer}>\n                <div className={dayStyle.timeSlots}>\n                    <div className={dayStyle.timeSlotTop}>\n                        <h3>{this.state.dow.substring(0, 3)}</h3>\n                    </div>\n                    \n                    {this.state.timeSlots.map(function (timeInfo) {\n                        if (timeInfo.start.substring(3) == \"00\"){\n                            return  <div className={dayStyle.timeSlotTop} value={timeInfo.start}>&nbsp;</div>;                    \n                        }\n                        else if (timeInfo.start.substring(4) == \"0\")\n                        {\n                            return  <div className={dayStyle.timeSlot} value={timeInfo.start}>&nbsp;</div>;\n\n                        }\n                        else\n                            return <div className={dayStyle.slot} value={timeInfo.start}></div>;\n                    })}\n\n                </div>\n                \n\n                {this.state.events.map(function (eventInfo) {\n                    return <Event eventInfo={eventInfo}> </Event>\n                }, this)}\n             \n\n\n            </div>\n            )\n        }\n        \n\n\n    }\n}\n\nexport default Day;","/Users/jang-hojung/schedulefront/frontend/src/components/views/calendars/Event.js",["110","111"],"\n\nimport React, {useState} from 'react';\nimport eStyle from './calendarStyles/Event.module.css'\n\n\nclass Event extends React.Component {\n    \n    constructor(props) {\n        super(props);\n        this.state = { \n            transY: this.props.transY,\n            eventInfo: this.props.eventInfo,\n            eventStyle: this.props.eventStyle,\n            eventDetail: \"\",\n            hov: false,\n\n        };\n        // console.log(\"info: \", this.state.eventInfo);\n        // console.log(\"eventheight: \" , this.getEventHeight);\n        this.getEventHeight = this.getEventHeight.bind(this);\n        this.getTranslate = this.getTranslate.bind(this);\n        this.setEventDetail = this.setEventDetail.bind(this);\n        this.dblClick = this.dblClick.bind(this);\n        this.setEventDetail();\n\n    }\n\n    setEventDetail() {\n        var detail = this.state.eventInfo.details.split(\",\");\n        var courseID = detail[1];\n        var courseName = detail[0];\n        var res = \"\";\n        // console.log(\"detail: \" + courseID + \" - \" + courseName);\n        return courseID + \" : \" + courseName;\n\n    }\n\n    setEventHover() {\n        var detail = this.state.eventInfo.name.split(\"-\");\n        var type = detail[1];\n        var sec = detail[0];\n        var res =  type + \"-\" + sec \n                    + \" ▶\" +this.state.eventInfo.time_start + \"~\" \n                    + this.state.eventInfo.time_end + \"◀ \"\n                    +  \" Location: \" + this.state.eventInfo.location;\n        console.log(\"doubleclicked\");\n        return res;\n    }\n\n    getEventHeight() {\n        let res = 0;\n        // end time hour - start time hour\n        let hr = (parseInt(this.state.eventInfo.time_end.substring(0, 2)) - parseInt(this.state.eventInfo.time_start.substring(0, 2))) * 60\n        // console.log(\"eventheight hr: \", hr);\n        // 60 - start time min + end time min\n        let min = (hr + parseInt(this.state.eventInfo.time_end.substring(3, 5))) - parseInt(this.state.eventInfo.time_start.substring(3, 5))\n        // console.log(\"eventheight min: \", min);\n\n        \n\n        res = min / 30 * 21;\n        // // gets the height of event in px\n        // console.log(\"eventheihgt: \" + res + \"px\");\n        return res;\n    }\n\n\n    // returns the px of translateY to put event at right Y pos\n    getTranslate() {\n        // 8:00 is translateY(43px)\n        let res = 43;\n        // start gives in the format of \"00:00\"\n        let hr  = (parseInt(this.state.eventInfo.time_start.substring(0, 2)) - 8) * 2;\n        let min = parseInt(this.state.eventInfo.time_start.substring(3, 5)) / 30;\n        // half an hour is an additional of 21px\n        res += ((hr + min) * 21)\n        return res;\n    }\n\n    async dblClick() {\n        await this.setState({\n            hov: !this.state.hov\n        })\n        console.log(\"dblckickckc\");\n    }\n\n\n\n\n\n    render () {\n\n        let transY = \"translateY(\" + this.getTranslate() + \"px)\";\n        let eventHeight = \"\" + this.getEventHeight() + \"px\";\n        let eventStyle = {transform:`${transY}`, height:`${eventHeight}`};\n\n        return (\n            <input type=\"button\" \n                    id=\"eventButton\"\n                    style={eventStyle} \n                    className={this.state.hov ? eStyle.eventButtonHover : eStyle.eventButton} \n                    onDoubleClick={() => this.dblClick()}\n                    value={this.state.hov ? this.setEventHover() : this.setEventDetail()}/>\n            \n\n        );\n\n\n\n    }\n}\n\nexport default Event;","/Users/jang-hojung/schedulefront/frontend/src/components/views/CourseDetailPop.js",[],{"ruleId":"112","replacedBy":"113"},{"ruleId":"114","replacedBy":"115"},{"ruleId":"116","severity":1,"message":"117","line":13,"column":8,"nodeType":"118","messageId":"119","endLine":13,"endColumn":16},{"ruleId":"120","severity":1,"message":"121","line":90,"column":40,"nodeType":"122","messageId":"123","endLine":90,"endColumn":48},{"ruleId":"124","severity":1,"message":"125","line":367,"column":13,"nodeType":"126","endLine":367,"endColumn":35},{"ruleId":"127","severity":1,"message":"128","line":369,"column":52,"nodeType":"129","messageId":"130","endLine":369,"endColumn":54},{"ruleId":"127","severity":1,"message":"128","line":376,"column":57,"nodeType":"129","messageId":"130","endLine":376,"endColumn":59},{"ruleId":"131","severity":1,"message":"132","line":387,"column":21,"nodeType":"118","messageId":"133","endLine":387,"endColumn":26},{"ruleId":"127","severity":1,"message":"134","line":392,"column":67,"nodeType":"129","messageId":"130","endLine":392,"endColumn":69},{"ruleId":"127","severity":1,"message":"128","line":400,"column":31,"nodeType":"129","messageId":"130","endLine":400,"endColumn":33},{"ruleId":"127","severity":1,"message":"128","line":409,"column":32,"nodeType":"129","messageId":"130","endLine":409,"endColumn":34},{"ruleId":"124","severity":1,"message":"125","line":452,"column":13,"nodeType":"126","endLine":452,"endColumn":23},{"ruleId":"124","severity":1,"message":"125","line":454,"column":13,"nodeType":"126","endLine":454,"endColumn":23},{"ruleId":"116","severity":1,"message":"135","line":460,"column":16,"nodeType":"118","messageId":"119","endLine":460,"endColumn":32},{"ruleId":"116","severity":1,"message":"136","line":460,"column":34,"nodeType":"118","messageId":"119","endLine":460,"endColumn":46},{"ruleId":"127","severity":1,"message":"134","line":29,"column":22,"nodeType":"129","messageId":"130","endLine":29,"endColumn":24},{"ruleId":"127","severity":1,"message":"134","line":32,"column":29,"nodeType":"129","messageId":"130","endLine":32,"endColumn":31},{"ruleId":"127","severity":1,"message":"134","line":40,"column":35,"nodeType":"129","messageId":"130","endLine":40,"endColumn":37},{"ruleId":"127","severity":1,"message":"128","line":70,"column":57,"nodeType":"129","messageId":"130","endLine":70,"endColumn":59},{"ruleId":"116","severity":1,"message":"137","line":11,"column":5,"nodeType":"118","messageId":"119","endLine":11,"endColumn":9},{"ruleId":"127","severity":1,"message":"128","line":138,"column":52,"nodeType":"129","messageId":"130","endLine":138,"endColumn":54},{"ruleId":"127","severity":1,"message":"128","line":145,"column":57,"nodeType":"129","messageId":"130","endLine":145,"endColumn":59},{"ruleId":"131","severity":1,"message":"132","line":156,"column":21,"nodeType":"118","messageId":"133","endLine":156,"endColumn":26},{"ruleId":"127","severity":1,"message":"134","line":160,"column":67,"nodeType":"129","messageId":"130","endLine":160,"endColumn":69},{"ruleId":"127","severity":1,"message":"128","line":168,"column":31,"nodeType":"129","messageId":"130","endLine":168,"endColumn":33},{"ruleId":"127","severity":1,"message":"128","line":177,"column":32,"nodeType":"129","messageId":"130","endLine":177,"endColumn":34},{"ruleId":"120","severity":1,"message":"138","line":194,"column":40,"nodeType":"122","messageId":"139","endLine":194,"endColumn":48},{"ruleId":"127","severity":1,"message":"134","line":263,"column":34,"nodeType":"129","messageId":"130","endLine":263,"endColumn":36},{"ruleId":"127","severity":1,"message":"128","line":33,"column":19,"nodeType":"129","messageId":"130","endLine":33,"endColumn":21},{"ruleId":"127","severity":1,"message":"128","line":37,"column":24,"nodeType":"129","messageId":"130","endLine":37,"endColumn":26},{"ruleId":"127","severity":1,"message":"128","line":41,"column":24,"nodeType":"129","messageId":"130","endLine":41,"endColumn":26},{"ruleId":"127","severity":1,"message":"128","line":45,"column":24,"nodeType":"129","messageId":"130","endLine":45,"endColumn":26},{"ruleId":"127","severity":1,"message":"134","line":51,"column":24,"nodeType":"129","messageId":"130","endLine":51,"endColumn":26},{"ruleId":"116","severity":1,"message":"140","line":60,"column":13,"nodeType":"118","messageId":"119","endLine":60,"endColumn":22},{"ruleId":"127","severity":1,"message":"128","line":98,"column":62,"nodeType":"129","messageId":"130","endLine":98,"endColumn":64},{"ruleId":"127","severity":1,"message":"128","line":130,"column":61,"nodeType":"129","messageId":"130","endLine":130,"endColumn":63},{"ruleId":"127","severity":1,"message":"128","line":132,"column":66,"nodeType":"129","messageId":"130","endLine":132,"endColumn":68},{"ruleId":"127","severity":1,"message":"128","line":155,"column":61,"nodeType":"129","messageId":"130","endLine":155,"endColumn":63},{"ruleId":"127","severity":1,"message":"128","line":164,"column":66,"nodeType":"129","messageId":"130","endLine":164,"endColumn":68},{"ruleId":"127","severity":1,"message":"128","line":195,"column":57,"nodeType":"129","messageId":"130","endLine":195,"endColumn":59},{"ruleId":"127","severity":1,"message":"128","line":198,"column":62,"nodeType":"129","messageId":"130","endLine":198,"endColumn":64},{"ruleId":"116","severity":1,"message":"141","line":3,"column":16,"nodeType":"118","messageId":"119","endLine":3,"endColumn":24},{"ruleId":"116","severity":1,"message":"142","line":33,"column":13,"nodeType":"118","messageId":"119","endLine":33,"endColumn":16},"no-native-reassign",["143"],"no-negated-in-lhs",["144"],"no-unused-vars","'Calendar' is defined but never used.","Identifier","unusedVar","array-callback-return","Array.prototype.map() expects a value to be returned at the end of function.","FunctionExpression","expectedAtEnd","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-redeclare","'begin' is already defined.","redeclared","Expected '!==' and instead saw '!='.","'showNoTimeCourse' is assigned a value but never used.","'NoTimeCourse' is assigned a value but never used.","'Link' is defined but never used.","Array.prototype.map() expects a return value from function.","expectedInside","'tempSlots' is assigned a value but never used.","'useState' is defined but never used.","'res' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]
[{"/Users/dumbcan/Desktop/COMP20/Tufts-Schedule-React/frontend/src/index.js":"1","/Users/dumbcan/Desktop/COMP20/Tufts-Schedule-React/frontend/src/components/views/scripts/fb.js":"2","/Users/dumbcan/Desktop/COMP20/Tufts-Schedule-React/frontend/src/App.js":"3","/Users/dumbcan/Desktop/COMP20/Tufts-Schedule-React/frontend/src/components/Schedule.js":"4","/Users/dumbcan/Desktop/COMP20/Tufts-Schedule-React/frontend/src/components/Event.js":"5","/Users/dumbcan/Desktop/COMP20/Tufts-Schedule-React/frontend/src/components/Homepage.js":"6","/Users/dumbcan/Desktop/COMP20/Tufts-Schedule-React/frontend/src/components/views/ButtonFBLogin.js":"7","/Users/dumbcan/Desktop/COMP20/Tufts-Schedule-React/frontend/src/components/views/CourseNameRecommendation.js":"8","/Users/dumbcan/Desktop/COMP20/Tufts-Schedule-React/frontend/src/components/views/Popup.js":"9","/Users/dumbcan/Desktop/COMP20/Tufts-Schedule-React/frontend/src/components/views/CoursesSelectedList.js":"10","/Users/dumbcan/Desktop/COMP20/Tufts-Schedule-React/frontend/src/components/views/calendars/Day.js":"11","/Users/dumbcan/Desktop/COMP20/Tufts-Schedule-React/frontend/src/components/views/CourseSelected.js":"12","/Users/dumbcan/Desktop/COMP20/Tufts-Schedule-React/frontend/src/components/views/CourseDetailPop.js":"13","/Users/dumbcan/Desktop/COMP20/Tufts-Schedule-React/frontend/src/components/views/calendars/Week.js":"14","/Users/dumbcan/Desktop/COMP20/Tufts-Schedule-React/frontend/src/components/views/calendars/Event.js":"15"},{"size":377,"mtime":1610441717345,"results":"16","hashOfConfig":"17"},{"size":1237,"mtime":1610441717342,"results":"18","hashOfConfig":"17"},{"size":824,"mtime":1610441717338,"results":"19","hashOfConfig":"17"},{"size":2383,"mtime":1610441717340,"results":"20","hashOfConfig":"17"},{"size":805,"mtime":1610171815613,"results":"21","hashOfConfig":"17"},{"size":15913,"mtime":1612618318953,"results":"22","hashOfConfig":"17"},{"size":2823,"mtime":1610441717341,"results":"23","hashOfConfig":"17"},{"size":4124,"mtime":1610171815619,"results":"24","hashOfConfig":"17"},{"size":1868,"mtime":1610541017105,"results":"25","hashOfConfig":"17"},{"size":3358,"mtime":1612001273972,"results":"26","hashOfConfig":"17"},{"size":6258,"mtime":1612698828028,"results":"27","hashOfConfig":"17"},{"size":1701,"mtime":1610718088698,"results":"28","hashOfConfig":"17"},{"size":1941,"mtime":1611638416500,"results":"29","hashOfConfig":"17"},{"size":6278,"mtime":1612617275536,"results":"30","hashOfConfig":"17"},{"size":3813,"mtime":1611673841512,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"1yxqsx0",{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"34"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"34"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"34"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"34"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"34"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"34"},"/Users/dumbcan/Desktop/COMP20/Tufts-Schedule-React/frontend/src/index.js",[],["69","70"],"/Users/dumbcan/Desktop/COMP20/Tufts-Schedule-React/frontend/src/components/views/scripts/fb.js",[],"/Users/dumbcan/Desktop/COMP20/Tufts-Schedule-React/frontend/src/App.js",["71"],"/* \n    Main react app \n    Created by Jeremy Jung\n*/\nimport React from 'react';\nimport Homepage from \"./components/Homepage.js\";\nimport Schedule from \"./components/Schedule.js\";\n\nimport {\n    Switch,\n    Route\n} from \"react-router-dom\";\nimport Calendar from './components/Event.js';\n\nexport default class App extends React.Component {\n\n    render() {\n        return (\n            <div>\n                {/* A <Switch> looks through its children <Route>s and\n        renders the first one that matches the current URL. */}\n                <Switch>\n                    <Route path=\"/schedule\">\n                        <Schedule />\n                    </Route>\n                    <Route path=\"/\">\n                        <Homepage />\n                    </Route>\n                </Switch>\n            </div>\n        );\n    }\n}","/Users/dumbcan/Desktop/COMP20/Tufts-Schedule-React/frontend/src/components/Schedule.js",[],"/Users/dumbcan/Desktop/COMP20/Tufts-Schedule-React/frontend/src/components/Event.js",[],"/Users/dumbcan/Desktop/COMP20/Tufts-Schedule-React/frontend/src/components/Homepage.js",["72","73","74"],"/*\n    Pages: Home page\n    Created by Jeremy Jung, Duncan Chang\n*/\n\nimport React from 'react';\nimport CoursesSelectedList from './views/CoursesSelectedList.js';\nimport CourseNameRecommendation from './views/CourseNameRecommendation.js';\nimport style from './views/styles/Homepage.module.css';\nimport csStyle from './views/styles/CourseSchedule.module.css';\nimport Popup from './views/Popup.js';\nimport Week from './views/calendars/Week.js'\nimport { ThemeProvider } from 'react-bootstrap';\nimport { json } from 'body-parser';\n\n/* scripts */\n\nclass Homepage extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            listCourseIDs: null, // all course IDs in semester catalog (mapped first letter)\n            currentInput: null,\n            recommendedCourseIDs: null,\n            selectedCourses: [], // courses added to list\n            checkSameID: true, // if courses returned from API has same couresID\n            popUp: false, // the state of popUp\n            popMap: [],\n            alertMessage: \"***\", \n            renderSchedule: false,\n            modifySearch: false, // true after render scheduled, false when user is able to add course on spot\n            eventInfo: [], // parsed JSON of event info from post request\n            drag: false, // if drag view is selected\n        }\n\n\n        this.handleAdd = this.handleAdd.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n        this.setMessage = this.setMessage.bind(this);\n        this.updateSelectedPop = this.updateSelectedPop.bind(this);\n        this.closeModifySearch = this.closeModifySearch.bind(this);\n        this.handleCheckInclude = this.handleCheckInclude.bind(this);\n\n    }\n\n    /*\n     * handleCheckID\n     * checks if user is entering a valid courseID.\n     * effect: sets checkSameID to false if multiple courses with different ID \n     *          is found, meaning that the user hasn't entered the exact courseID\n     */\n    handleCheckID(mappedResults) {\n        // Debug purpose\n        console.log(\"mappedResults length: \" + mappedResults.length);\n        console.log(\"checkSameID: \" + this.state.checkSameID);\n        console.log(mappedResults[0]);\n        // console.log(mappedResults[1]);\n        // console.log(mappedResults[0].course_id == mappedResults[1].course_id);\n\n        \n        let checkID = mappedResults[0].course_id;\n\n        // checks if the user input is a valid courseID\n        for (var i = 0; i < mappedResults.length; i++)\n        {\n            console.log(this.state.checkSameID);\n            console.log(\"the length of mappedReusults:\" + mappedResults.length);\n            if (mappedResults[i].course_id !== checkID)\n            {\n                console.log(\"it went in here\");\n                // prevent user from adding incomplete course ID \n                this.setState({\n                    checkSameID: false\n                })\n                break;\n            }\n            console.log(this.state.checkSameID);\n\n        }\n\n    }\n\n    handleCheckInclude(mappedResult) {\n        this.state.selectedCourses.map(function(course) {\n            if (JSON.stringify(mappedResult) === JSON.stringify(course))\n            {\n                console.log(\"mappedResult: \" , mappedResult);\n                console.log(\"course: \" , course);\n                console.log(\"equal? \" , JSON.stringify(mappedResult) === JSON.stringify(course));\n                return true;\n            }\n        })\n        return false;\n    }\n\n    // handles the add function. prevents user from adding non-existing courseID\n    async handleAdd(event) {\n\n        await this.setMessage(\"***\");\n\n        console.log(\"the beginning state: \" + this.state.checkSameID);\n        //prevent default event handler\n        event.preventDefault();\n        let nameField = document.getElementById(\"input\");\n        let mappedResults = this.state.listCourseIDs[this.state.currentInput];\n\n        // checks if user input is valid\n        if (mappedResults !== undefined)\n        {\n            // resets the state of popUp\n            this.setState({\n                popUp: false,\n            })\n            // needs checkSameID to be up to date. always.\n            await this.handleCheckID(mappedResults);\n\n            // This if is to check if Popup is needed\n            if(this.state.checkSameID && mappedResults.length > 1)\n            {\n                this.setState({\n                    popUp: true,\n                    popMap: mappedResults,\n                })\n            }\n            // checks if a course has been added\n            else if (this.state.checkSameID && (this.state.selectedCourses.includes(mappedResults[0])))\n            {\n                await this.setMessage(\"** This course has already been added! **\");\n            }\n            // adds that one course to list\n            else if (this.state.checkSameID && mappedResults.length === 1)\n            {\n                console.log(\"check multt add before\" , mappedResults);\n                console.log(\"check selectedcourses add before\" , this.state.selectedCourses);\n                console.log(\"check include again \" , (this.state.selectedCourses.includes(mappedResults[0])))\n\n                // let name = this.state.currentInput.toUpperCase(); // get user input\n                let courseToAdd = mappedResults[0];\n                // UPDATE STATE selectedCourses \n                var arrayJoined = this.state.selectedCourses.concat(courseToAdd);\n                await this.setState({ selectedCourses: arrayJoined });\n                console.log(\"check selectedcourses add after\" , this.state.selectedCourses);\n\n                nameField.value = \"\";\n            }\n            else{\n                console.log(\"here 2\");\n                console.log(\"alerts here\");\n                // resets the state\n                this.setState({\n                    checkSameID: true,\n                })\n                await this.setMessage(\"** Please enter a VALID COURSE ID! **\");\n            }\n        }\n        // if user input is invalid\n        else{\n            await this.setMessage(\"** Please enter a VALID COURSE ID! **\");\n\n        }\n        \n        \n    }\n\n    /*  \n     *  closePop()\n     *  a callback function by Popup.js's closing div (x)\n     *  manages the state of whether a Popup should be shown\n     *  resets the state of popUp\n     */ \n    closePop()\n    {\n        this.setState({\n            popUp: false\n        })\n    }\n   \n    /*  \n     *  updateSelectedPop()\n     *  manages actions if a course is selected from Popup\n     *  adds course to courselist \n     */ \n    async updateSelectedPop(popSelected)\n    {\n        console.log(\"close: \" + popSelected);\n        // checks if popUp should be shown, and if selected course was previously added\n        if (this.state.popUp && !this.state.selectedCourses.includes(popSelected))\n        {\n            \n            var arrayJoined = this.state.selectedCourses.concat(popSelected);\n            console.log(\"test: \" , popSelected);\n            this.setState({ \n                selectedCourses: arrayJoined,\n                popUp: false \n            });\n            document.getElementById(\"input\").value = \"\";\n        }\n        else if (this.state.popUp){\n            console.log(\"this alert\");\n            await this.setMessage(\"** This Course Has Already Been Added! **\");\n        }\n        else{\n            document.getElementById(\"input\").value = \"\";\n            this.setMessage(\"***\");\n        }\n        \n        \n        \n    }\n    /*  \n     *  setMessage()\n     *  changes the message in div when called using {message}\n     *  sets the state of alertMessage \n     */ \n    setMessage(message){\n        this.setState({\n            alertMessage: message,\n        })\n        \n    }\n\n    handleGenerate() {\n        \n        var selectedCourses = this.state.selectedCourses;\n        console.log(\"handling generate\");\n        console.log(\"selectedCourses: \", selectedCourses);\n    }\n\n    componentDidMount() {\n        // initialize {listCourseIDs} in this component's state\n        this.getListCourseIDs();\n  \n\n    }\n    \n    async getListCourseIDs() {\n        var API_URL = process.env.REACT_APP_API_URL + \"/courses/alg/search-table\";\n        fetch(API_URL)\n            .then(\n                (response) => response.json()\n            )\n            .then(result => {\n                //if the request is valid\n                this.setState({\n                    listCourseIDs: result.data,\n                });\n            },\n            (error) => {\n                console.log(\"error\", error);\n        });\n    }\n\n\n\n    /* CourseID input scripts */\n\n    // todo: link\n    handleChange() {\n        console.log(\"handling change\");\n        let nameField = document.getElementById(\"input\");\n        let name = nameField.value.toLowerCase(); // get user input\n        this.setState((state) => ({ currentInput: name })); // update state (currentInput)\n        \n    }\n\n    /*  \n     *  removeCourse(item)\n     *  deletes the course specified (passed in as \"item\") \n     *  looks through selectedCourses, finds, then delete\n     */ \n    async removeCourse(item) {\n        \n        var res = this.state.selectedCourses;\n        // look for the index and remove\n        for (var i = 0 ; i < this.state.selectedCourses.length; i++)\n        {\n            if (this.state.selectedCourses[i] === item)\n            {\n                delete res[i]\n                await this.setState({\n                    selectedCourses: res,\n                })\n                break;\n            }\n        }\n\n    }\n    async handleSchedule(check) {\n        await this.setState({\n            renderSchedule: check,\n            modifySearch: check,\n        })\n        console.log(\"schedule called\");\n        console.log(this.state.renderSchedule);\n        await this.getListCourseIDs();\n        console.log(\"called rerender\");\n        await this.setState({\n            renderSchedule:false,\n        })\n        await this.setState({\n            renderSchedule:true,\n        })\n        // runs post request \n        // await this.getRecSchedule();\n    }\n\n\n    async closeModifySearch(){\n        await this.setState({\n            modifySearch: false,\n        })\n    }\n\n    render() {\n\n        /* asynchronously render home page after getting courseIDs*/\n        if (this.state.listCourseIDs == null) {\n            // render loading state...\n            return (\n                <div className={style.loadContainer}>\n                    Loading...\n                </div>\n            );\n        }\n        else {\n            // render real UI..\n            return (\n\n                <div className={csStyle.csContainer}>\n                    {/* part 1 header logo and stuff  */}\n                    <header >\n                        <h1>Schedule Planner</h1>\n                        <br/>\n                        <br/>\n                    </header>\n    \n                    {/* part 2 the rest goes in flex column */}\n                    <div className={csStyle.columnContainer}>\n                        <div className={csStyle.searchContainer}>\n                                {this.state.modifySearch ? \n    \n                                    // the modify search button\n                                    <input className={csStyle.courseSubmit} type=\"button\" value=\"Modify List\" onClick={this.closeModifySearch} /> :\n    \n                                    // or the input field that allows user to add courses\n                                    <div className={csStyle.inputContainer}>\n    \n    \n                                        {/* handles the add course form */}\n                                        <form onSubmit={this.handleAdd}>\n                                            \n                                            {/* input text field and search rec droplist */}\n                                            <div>\n                                                <input className={csStyle.courseInput} onChange={this.handleChange} list='recommendedCourseIDs' id=\"input\" type=\"text\" autoComplete=\"off\" placeholder=\"COMP-0015\" />\n                                                <CourseNameRecommendation \n                                                    listCourseIDs = {this.state.listCourseIDs} \n                                                    currentInput = {this.state.currentInput}>\n                                                </CourseNameRecommendation>\n                                            </div>\n                                            &nbsp;\n                                            {/* add button */}\n                                            {this.state.popUp ? \n                                                // popup for courses of same id but diff names\n                                                <Popup \n                                                    popMap={this.state.popMap} \n                                                    updateSelectedPop={this.updateSelectedPop.bind(this)} \n                                                    closePop={this.closePop.bind(this)} \n                                                    setMessage={this.setMessage.bind(this)}  >\n                                                </Popup> : \n    \n                                                // or just the add button\n                                                <input className={csStyle.courseSubmit} type=\"submit\" value=\"Add\" />\n                                            }\n    \n                                        </form>\n    \n                                        <br/>\n    \n                                        {/* the alert message */}\n                                        {(this.state.alertMessage.localeCompare(\"***\"))? <div className={csStyle.alert} id=\"alert\">{this.state.alertMessage}</div> : <div className={style.noAlert} id=\"alert\">{this.state.alertMessage}</div>}\n                                        \n                                    </div>\n                                \n                                }\n\n\n\n                            {/* part 2-1 the selected courses block */}\n                            <CoursesSelectedList \n                                handleGenerate = {this.handleGenerate.bind(this)} \n                                selectedCourses={this.state.selectedCourses} \n                                listCourseIDs = {this.state.listCourseIDs} \n                                popUp={this.state.popUp} \n                                removeCourse={this.removeCourse.bind(this)} \n                                setMessage={this.setMessage.bind(this)} \n                                handleSchedule={this.handleSchedule.bind(this)}>\n                            </CoursesSelectedList>\n    \n    \n    \n                        </div>\n                        \n    \n                        {/* part 2-2 flex row the search input and calendar */}\n                        <div className={csStyle.verticalContainer}>\n                            \n                            <br/>\n                            {this.state.renderSchedule ? <input type=\"button\" className={csStyle.timePref} value={this.state.drag ? \"View Schedule\" : \"Edit Time Preference\"} onClick={()=> this.setState({drag: !this.state.drag})}/> : <br></br>}\n                            <br/>\n                            {this.state.renderSchedule ? <Week courseSchedule={true} selectedCourses={this.state.selectedCourses} eventInfo={this.state.eventInfo} drag={false}></Week> : <p></p>}\n                            {this.state.drag ? <Week courseSchedule={true} selectedCourses={this.state.selectedCourses} eventInfo={{}} drag={true}></Week> : <div></div>}\n    \n    \n                        </div>\n    \n    \n    \n                    </div>\n                    \n    \n    \n    \n    \n                </div>\n            \n            );\n        }\n    }\n}\n\nexport default Homepage;","/Users/dumbcan/Desktop/COMP20/Tufts-Schedule-React/frontend/src/components/views/ButtonFBLogin.js",[],"/Users/dumbcan/Desktop/COMP20/Tufts-Schedule-React/frontend/src/components/views/CourseNameRecommendation.js",["75","76","77","78"],"/*\n    Drop down list of course name suggestions\n    Created by Jeremy Jung\n*/\n\nimport React from 'react';\n//import style from './styles/CourseNameRecommendation.module.css';\n\n\nclass CourseNameRecommendation extends React.Component {\n    \n    constructor (props) {\n        super(props);\n        console.log(\"render\");\n\n        this.state = {\n            recommendedCourseIDs: null,\n\n        }\n    }\n\n    // O(k) where k is length of courseID\n    // courseID is the user input\n    // listCourseIDs takes in the courseID\n    recommendSearch (listCourseIDs, courseID) {\n        var courseIDsRecommended = [];\n        let mappedResults = [];\n\n        if (courseID != undefined || courseID != null) {\n\n            // recommend if there is at least one character in input\n            if (courseID[0] != undefined) {\n\n                // mapperResults is an array of \"matched\" courses (from API) by the user input \n                mappedResults = listCourseIDs[courseID];\n                // console.log(\"listCourseIDs: \" + listCourseIDs);\n                // console.log(\"courseID: \" + courseID);\n\n\n                if (mappedResults != undefined) {\n\n                    let resultsMaxDisplay = 5;\n                    \n                    // lower maximum results length if one specified is greater than what's possible\n                    if (resultsMaxDisplay > mappedResults.length)\n                        resultsMaxDisplay = mappedResults.length;\n\n                    /* DEBUG: list all info */\n                    // console.log(\"resultsMaxDisplay: \", resultsMaxDisplay)\n                    // console.log(\"mappedResults:\", mappedResults)\n                    // console.log(\"mappedResults.length: \", mappedResults.length)\n                    // console.log(\"mappedResults[0]: \" + mappedResults[0]);\n                    // console.log(\"mappedResults[0].course_id: \" + mappedResults[0].course_id);\n\n                    let i = 0;\n                    /* add recommended courseIDs to list by amount specified by resultsMaxDisplay*/\n                    while (courseIDsRecommended.length < resultsMaxDisplay && i < mappedResults.length) {\n                        // console.log(\"i: \", i);\n                        /* break if i is equal to the length of mappedResults */\n                        if (i >= mappedResults.length)\n                            break; \n\n                        let courseId = mappedResults[i].course_id;\n                        console.log(\"mappedResults:\", mappedResults);\n\n                        /* check if the courseId already exists in courseIDsRecommended */\n                        let doesNotExist = true;\n                        for (let j = 0; j < courseIDsRecommended.length; j++) {\n\n                            if (courseIDsRecommended[j] == courseId) {\n                                doesNotExist = false;\n                                break;\n                            }\n                        }\n\n                        /* push to recommended list if entry does not yet exist */\n                        if (doesNotExist) {\n                            courseIDsRecommended.push(courseId);\n                        }\n                        i++;\n                    }\n\n                }\n                else {\n                    courseIDsRecommended = [];\n                }\n               \n            }\n            else {\n                courseIDsRecommended = [];\n            }\n        }\n        else {\n            courseIDsRecommended = [];\n        }\n\n        return courseIDsRecommended;\n\n    }\n\n    \n\n    render() {\n\n        let currentInput = this.props.currentInput;\n\n        let listCourseIDs = this.props.listCourseIDs;\n\n        var recommendedCourseIDs = this.recommendSearch(listCourseIDs, currentInput);\n\n        console.log(\"recommendedCourseIDs: \" + recommendedCourseIDs);\n        \n        return(\n            <datalist id=\"recommendedCourseIDs\">\n                {recommendedCourseIDs.map(function (id) {\n                    return <option key={id} value={id} ></option>\n                })}\n            </datalist>\n        );\n    }\n\n}\nexport default CourseNameRecommendation;","/Users/dumbcan/Desktop/COMP20/Tufts-Schedule-React/frontend/src/components/views/Popup.js",[],"/Users/dumbcan/Desktop/COMP20/Tufts-Schedule-React/frontend/src/components/views/CoursesSelectedList.js",["79"],"/*\n    List containing selected selected courses represented by {CourseSelected}\n    Created by Jeremy Jung, Duncan Chang\n*/\n\nimport React from 'react';\nimport style from './styles/CoursesSelectedList.module.css';\nimport CourseSelected from './CourseSelected.js';\n\nimport {\n    Link\n} from \"react-router-dom\";\n\nclass CoursesSelectedList extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            listCourseIDs: this.props.listCourseIDs,\n            coursePopDetail: false,\n            schedulePage: false,\n        }\n\n        this.handleGenerate = this.handleGenerate.bind(this);\n\n    }\n\n    async handlePop()\n    {\n        console.log(\"coursePopDetail before: \" , this.state.coursePopDetail);\n\n        await this.setState({\n            coursePopDetail: true,\n        })\n        console.log(\"coursePopDetail after: \" , this.state.coursePopDetail);\n    }\n    \n    async closePop()\n    {\n        await this.setState({\n            coursePopDetail: false,\n        })\n    }\n\n    async scheduleCondition(){\n        if (this.props.selectedCourses.length > 0)\n        {\n            await this.setState({\n                schedulePage: true,\n            })\n        }\n    }\n\n    // async removeCourse(item)\n    // {\n    //     await this.props.removeCourse(item);\n    // }\n\n    async handleGenerate() {\n        await this.scheduleCondition();\n\n        if (this.state.schedulePage)\n        {\n            this.props.handleGenerate();\n            // calls this from props and post request rec schedule\n            this.props.handleSchedule(true);\n        }\n        else \n        {\n            this.props.setMessage(\"*** Please Add Course to List ***\");\n        }\n    }\n\n    render() {\n      \n        \n        console.log(\"my seleceted courses: \" , this.props.selectedCourses);\n        let containerClass;\n        // checks which css class the container should follow\n        if (this.state.coursePopDetail)\n        {\n            containerClass = false;\n        }\n        else\n        {\n            containerClass = this.props.popUp;\n        }\n        \n        console.log(\"test this: \" , this.state.coursePopDetail);\n        console.log(\"containerClass: \", containerClass);\n        return (\n            <div className = {containerClass ? style.popContainer : style.container}id = \"coursesSelectedList\">\n                <h2>Your selected courses</h2>\n                <div className={this.state.coursePopDetail ? style.popCourseList : style.courseList}>\n                    {this.props.selectedCourses.map(function (courseInfo) {\n                        return <CourseSelected courseInfo = {courseInfo} pop={false} handlePop = {this.handlePop.bind(this)} closePop= {this.closePop.bind(this)} coursePopDetail = {this.state.coursePopDetail} removeCourse={this.props.removeCourse}></CourseSelected>\n                    }, this)}\n                </div>\n                <br/>\n\n                <input type=\"button\" value=\"Render Schedule\" className = {this.state.coursePopDetail ? style.popButton : style.button} onClick={this.handleGenerate}/>\n                {/* <Link className = {this.state.coursePopDetail ? style.popButton : style.button} onClick = {this.props.handleGenerate} to = \"/schedule\">\n                    Schedule\n                </Link> */}\n            </div>\n        );\n    }\n}\n\nexport default CoursesSelectedList;","/Users/dumbcan/Desktop/COMP20/Tufts-Schedule-React/frontend/src/components/views/calendars/Day.js",["80","81","82","83","84","85","86","87","88","89","90","91"],"/Users/dumbcan/Desktop/COMP20/Tufts-Schedule-React/frontend/src/components/views/CourseSelected.js",[],"/Users/dumbcan/Desktop/COMP20/Tufts-Schedule-React/frontend/src/components/views/CourseDetailPop.js",[],"/Users/dumbcan/Desktop/COMP20/Tufts-Schedule-React/frontend/src/components/views/calendars/Week.js",["92"],"\n\nimport React from 'react';\nimport Day from './Day.js';\nimport weekStyle from './calendarStyles/Week.module.css'\n\n\nclass Week extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            dows: [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"],\n            selectedCourses: this.props.selectedCourses,\n        }\n\n        console.log(\"event Info: \", this.props.eventInfo);\n    }\n\n    componentDidMount() {\n        if (!this.props.drag)\n        {\n            this.getRecSchedule();\n        }\n    }\n\n    // maps through selected courses and push all object ids to array\n    getObjectIDs() {\n        let res = [];\n        this.state.selectedCourses.map(function(info) {\n            res.push(info._id);\n        })\n        return res;\n    }\n\n\n    // post requests recommended schedule made by API\n    async getRecSchedule() {\n        console.log(\"selected Courses: \" , this.state.selectedCourses);\n        console.log(\"object ids: \", this.getObjectIDs());\n        var API_URL = process.env.REACT_APP_API_URL + \"/courses/schedule\";\n        var requestDetail = {\n            \"objectIds\": this.getObjectIDs(),\n            \"filter\": {\n                \"time\": {\n                    \"Monday\": [\n                    {\n                        \"time_earliest\": \"00:00\",\n                        \"time_latest\": \"23:59\"\n                    }\n                    ],\n                    \"Tuesday\": [\n                    {\n                        \"time_earliest\": \"00:00\",\n                        \"time_latest\": \"23:59\"\n                    }\n                    ],\n                    \"Wednesday\": [\n                    {\n                        \"time_earliest\": \"00:00\",\n                        \"time_latest\": \"23:59\"\n                    }\n                    ],\n                    \"Thursday\": [\n                    {\n                        \"time_earliest\": \"00:00\",\n                        \"time_latest\": \"23:59\"\n                    }\n                    ],\n                    \"Friday\": [\n                    {\n                        \"time_earliest\": \"00:00\",\n                        \"time_latest\": \"23:59\"\n                    }\n                    ],\n                    \"Saturday\": [\n                    {\n                        \"time_earliest\": \"00:00\",\n                        \"time_latest\": \"23:59\"\n                    }\n                    ],\n                    \"Sunday\": [\n                    {\n                        \"time_earliest\": \"00:00\",\n                        \"time_latest\": \"23:59\"\n                    }\n                    ]\n                }\n            }\n        };\n\n\n        fetch(API_URL, {\n            /* NOTE for duncan: when using the API, you can only set  */\n            method: 'POST',\n\n            /* Note to Duncan: don't set mode: to 'no-cors' because the API does have CORS. You can laeve the 'mode:' out and it will work */\n            // mode: 'no-cors', // no-cors, *cors, same-origin\n\n            headers: {\n            'Content-Type': 'application/json'\n            },\n            /* Note to duncan: i dont think you need these. It still works without them i guess? */\n            // redirect: 'follow', // manual, *follow, error\n            // referrerPolicy: 'no-referrer', // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url\n            body: JSON.stringify(requestDetail) // body data type must match \"Content-Type\" header\n        })\n        .then((response) => \n            response.json())\n        .then(result => {\n            //if the request is valid\n            console.log(\"result post: \" , result);\n            this.setState({\n                eventInfo: result.data\n            });\n            /* Note to Duncan: because this console.log is inside a .then() statement, it will execute after response is received */\n            console.log(\"post request event: \", this.state.eventInfo);\n        },\n            (error) => {\n                console.log(\"error\", error);\n        });\n\n        /* Note to Duncan: this will show undefined because it will be executed before a response is received */\n        console.log(\"post request event: \", this.state.eventInfo);\n\n\n    }\n\n\n    render () {\n        console.log(\"props eventinfo: \", this.props.eventInfo);\n        if (this.state.eventInfo === undefined && !this.props.drag)\n        {\n            console.log(\"check if list updates before: \" , this.state.eventInfo);\n            return (\n                \n                <div>\n                    Loading Course Schedule... \n                </div>\n            )\n        }\n        else if (this.props.drag)\n        {\n            console.log(\"check if list updates after: \" , this.state.eventInfo);\n\n            return(\n                <div className={weekStyle.dragBox}> \n                    <div className={weekStyle.dragWeekContainer }> \n                        <Day dow=\"\" timeBar={true} courseSchedule={this.props.courseSchedule}></Day>\n                        {this.state.dows.map(function (dow) {\n                            console.log(\"eventinfo: \" , this.state.eventInfo);\n                            console.log(\"dow\" , dow);\n                            return <Day className={weekStyle.day} dow={dow} courseSchedule={{}} events={null}></Day>;\n                        }, this)}\n        \n                    </div>\n                </div>\n                \n                \n    \n            )\n        }\n        else\n        {\n            console.log(\"check if list updates after: \" , this.state.eventInfo);\n\n            return(\n                <div className={weekStyle.weekContainer}> \n                    <Day dow=\"\" timeBar={true} courseSchedule={this.props.courseSchedule}></Day>\n                    {this.state.dows.map(function (dow) {\n                        console.log(\"eventinfo: \" , this.state.eventInfo);\n                        console.log(\"dow\" , dow);\n                        return <Day className={weekStyle.day} dow={dow} courseSchedule={this.props.courseSchedule} events={this.state.eventInfo[dow]}></Day>;\n                    }, this)}\n    \n                </div>\n                \n    \n            )\n        }\n        \n\n    }\n}\n\nexport default Week;","/Users/dumbcan/Desktop/COMP20/Tufts-Schedule-React/frontend/src/components/views/calendars/Event.js",["93","94","95"],"\n\nimport React, {useState} from 'react';\nimport NavbarCollapse from 'react-bootstrap/esm/NavbarCollapse';\nimport eStyle from './calendarStyles/Event.module.css'\n\n\nclass Event extends React.Component {\n    \n    constructor(props) {\n        super(props);\n        this.state = { \n            transY: this.props.transY,\n            eventInfo: this.props.eventInfo,\n            eventStyle: this.props.eventStyle,\n            eventDetail: \"\",\n            hov: false,\n\n        };\n        console.log(\"info: \", this.state.eventInfo);\n        console.log(\"eventheight: \" , this.getEventHeight);\n        this.getEventHeight = this.getEventHeight.bind(this);\n        this.getTranslate = this.getTranslate.bind(this);\n        this.setEventDetail = this.setEventDetail.bind(this);\n        this.dblClick = this.dblClick.bind(this);\n        this.setEventDetail();\n\n    }\n\n    setEventDetail() {\n        var detail = this.state.eventInfo.details.split(\",\");\n        var courseID = detail[1];\n        var courseName = detail[0];\n        var res = \"\";\n        console.log(\"detail: \" + courseID + \" - \" + courseName);\n        return courseID + \" : \" + courseName;\n\n    }\n\n    setEventHover() {\n        var detail = this.state.eventInfo.name.split(\"-\");\n        var type = detail[1];\n        var sec = detail[0];\n        var res =  type + \"-\" + sec \n                    + \" ▶\" +this.state.eventInfo.time_start + \"~\" \n                    + this.state.eventInfo.time_end + \"◀ \"\n                    +  \" Location: \" + this.state.eventInfo.location;\n        console.log(\"doubleclicked\");\n        return res;\n    }\n\n    getEventHeight() {\n        let res = 0;\n        // end time hour - start time hour\n        let hr = (parseInt(this.state.eventInfo.time_end.substring(0, 2)) - parseInt(this.state.eventInfo.time_start.substring(0, 2))) * 60\n        console.log(\"eventheight hr: \", hr);\n        // 60 - start time min + end time min\n        let min = (hr + parseInt(this.state.eventInfo.time_end.substring(3, 5))) - parseInt(this.state.eventInfo.time_start.substring(3, 5))\n        console.log(\"eventheight min: \", min);\n\n        // // if start time's min == \"00\" then don't count start time's min\n        // if (parseInt(this.state.eventInfo.time_start.substring(3, 5)) == 0)\n        // {\n        //     min = parseInt(this.state.eventInfo.time_end.substring(3, 5));\n        // }\n\n        res = min / 30 * 21;\n        // // gets the height of event in px\n        // res = (hr + min) * 21;\n        console.log(\"eventheihgt: \" + res + \"px\");\n        return res;\n    }\n\n\n    // returns the px of translateY to put event at right Y pos\n    getTranslate() {\n        // 8:00 is translateY(43px)\n        let res = 43;\n        // start gives in the format of \"00:00\"\n        let hr  = (parseInt(this.state.eventInfo.time_start.substring(0, 2)) - 8) * 2;\n        let min = parseInt(this.state.eventInfo.time_start.substring(3, 5)) / 30;\n        // half an hour is an additional of 21px\n        res += ((hr + min) * 21)\n        return res;\n    }\n\n    async dblClick() {\n        await this.setState({\n            hov: !this.state.hov\n        })\n        console.log(\"dblckickckc\");\n    }\n\n\n\n\n\n    render () {\n\n        let transY = \"translateY(\" + this.getTranslate() + \"px)\";\n        let eventHeight = \"\" + this.getEventHeight() + \"px\";\n        let eventStyle = {transform:`${transY}`, height:`${eventHeight}`};\n\n        return (\n            <input type=\"button\" \n                    id=\"eventButton\"\n                    style={eventStyle} \n                    className={this.state.hov ? eStyle.eventButtonHover : eStyle.eventButton} \n                    onDoubleClick={() => this.dblClick()}\n                    value={this.state.hov ? this.setEventHover() : this.setEventDetail()}/>\n            \n\n        );\n\n\n\n    }\n}\n\nexport default Event;",{"ruleId":"96","replacedBy":"97"},{"ruleId":"98","replacedBy":"99"},{"ruleId":"100","severity":1,"message":"101","line":13,"column":8,"nodeType":"102","messageId":"103","endLine":13,"endColumn":16},{"ruleId":"100","severity":1,"message":"104","line":13,"column":10,"nodeType":"102","messageId":"103","endLine":13,"endColumn":23},{"ruleId":"100","severity":1,"message":"105","line":14,"column":10,"nodeType":"102","messageId":"103","endLine":14,"endColumn":14},{"ruleId":"106","severity":1,"message":"107","line":85,"column":40,"nodeType":"108","messageId":"109","endLine":85,"endColumn":48},{"ruleId":"110","severity":1,"message":"111","line":29,"column":22,"nodeType":"112","messageId":"113","endLine":29,"endColumn":24},{"ruleId":"110","severity":1,"message":"111","line":32,"column":29,"nodeType":"112","messageId":"113","endLine":32,"endColumn":31},{"ruleId":"110","severity":1,"message":"111","line":40,"column":35,"nodeType":"112","messageId":"113","endLine":40,"endColumn":37},{"ruleId":"110","severity":1,"message":"114","line":70,"column":57,"nodeType":"112","messageId":"113","endLine":70,"endColumn":59},{"ruleId":"100","severity":1,"message":"115","line":11,"column":5,"nodeType":"102","messageId":"103","endLine":11,"endColumn":9},{"ruleId":"100","severity":1,"message":"104","line":3,"column":10,"nodeType":"102","messageId":"103","endLine":3,"endColumn":23},{"ruleId":"110","severity":1,"message":"114","line":33,"column":19,"nodeType":"112","messageId":"113","endLine":33,"endColumn":21},{"ruleId":"110","severity":1,"message":"114","line":37,"column":24,"nodeType":"112","messageId":"113","endLine":37,"endColumn":26},{"ruleId":"110","severity":1,"message":"114","line":41,"column":24,"nodeType":"112","messageId":"113","endLine":41,"endColumn":26},{"ruleId":"110","severity":1,"message":"114","line":45,"column":24,"nodeType":"112","messageId":"113","endLine":45,"endColumn":26},{"ruleId":"110","severity":1,"message":"111","line":51,"column":24,"nodeType":"112","messageId":"113","endLine":51,"endColumn":26},{"ruleId":"110","severity":1,"message":"114","line":116,"column":61,"nodeType":"112","messageId":"113","endLine":116,"endColumn":63},{"ruleId":"110","severity":1,"message":"114","line":118,"column":66,"nodeType":"112","messageId":"113","endLine":118,"endColumn":68},{"ruleId":"110","severity":1,"message":"114","line":139,"column":61,"nodeType":"112","messageId":"113","endLine":139,"endColumn":63},{"ruleId":"110","severity":1,"message":"114","line":141,"column":66,"nodeType":"112","messageId":"113","endLine":141,"endColumn":68},{"ruleId":"110","severity":1,"message":"114","line":166,"column":57,"nodeType":"112","messageId":"113","endLine":166,"endColumn":59},{"ruleId":"110","severity":1,"message":"114","line":168,"column":62,"nodeType":"112","messageId":"113","endLine":168,"endColumn":64},{"ruleId":"106","severity":1,"message":"116","line":29,"column":40,"nodeType":"108","messageId":"117","endLine":29,"endColumn":48},{"ruleId":"100","severity":1,"message":"118","line":3,"column":16,"nodeType":"102","messageId":"103","endLine":3,"endColumn":24},{"ruleId":"100","severity":1,"message":"119","line":4,"column":8,"nodeType":"102","messageId":"103","endLine":4,"endColumn":22},{"ruleId":"100","severity":1,"message":"120","line":34,"column":13,"nodeType":"102","messageId":"103","endLine":34,"endColumn":16},"no-native-reassign",["121"],"no-negated-in-lhs",["122"],"no-unused-vars","'Calendar' is defined but never used.","Identifier","unusedVar","'ThemeProvider' is defined but never used.","'json' is defined but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of function.","FunctionExpression","expectedAtEnd","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Expected '===' and instead saw '=='.","'Link' is defined but never used.","Array.prototype.map() expects a return value from function.","expectedInside","'useState' is defined but never used.","'NavbarCollapse' is defined but never used.","'res' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]
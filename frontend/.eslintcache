[{"/Users/dumbcan/Desktop/COMP20/Tufts-Schedule-React/frontend/src/index.js":"1","/Users/dumbcan/Desktop/COMP20/Tufts-Schedule-React/frontend/src/App.js":"2","/Users/dumbcan/Desktop/COMP20/Tufts-Schedule-React/frontend/src/components/Schedule.js":"3","/Users/dumbcan/Desktop/COMP20/Tufts-Schedule-React/frontend/src/components/Homepage.js":"4","/Users/dumbcan/Desktop/COMP20/Tufts-Schedule-React/frontend/src/components/views/OptionsMainList.js":"5","/Users/dumbcan/Desktop/COMP20/Tufts-Schedule-React/frontend/src/components/views/CoursesSelectedList.js":"6","/Users/dumbcan/Desktop/COMP20/Tufts-Schedule-React/frontend/src/components/views/CourseNameRecommendation.js":"7","/Users/dumbcan/Desktop/COMP20/Tufts-Schedule-React/frontend/src/components/views/OptionMainButton.js":"8","/Users/dumbcan/Desktop/COMP20/Tufts-Schedule-React/frontend/src/components/views/CourseSelected.js":"9","/Users/dumbcan/Desktop/COMP20/Tufts-Schedule-React/frontend/src/components/Event.js":"10"},{"size":238,"mtime":1609230344565,"results":"11","hashOfConfig":"12"},{"size":863,"mtime":1609944799668,"results":"13","hashOfConfig":"12"},{"size":634,"mtime":1609945303613,"results":"14","hashOfConfig":"12"},{"size":5279,"mtime":1609942977727,"results":"15","hashOfConfig":"12"},{"size":774,"mtime":1609230344563,"results":"16","hashOfConfig":"12"},{"size":1017,"mtime":1609340935284,"results":"17","hashOfConfig":"12"},{"size":2225,"mtime":1609924941210,"results":"18","hashOfConfig":"12"},{"size":636,"mtime":1609230344563,"results":"19","hashOfConfig":"12"},{"size":525,"mtime":1609230344562,"results":"20","hashOfConfig":"12"},{"size":505,"mtime":1609944864464,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"1yxqsx0",{"filePath":"25","messages":"26","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"24"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"24"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"24"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"24"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/dumbcan/Desktop/COMP20/Tufts-Schedule-React/frontend/src/index.js",[],["48","49"],"/Users/dumbcan/Desktop/COMP20/Tufts-Schedule-React/frontend/src/App.js",["50","51","52"],"/Users/dumbcan/Desktop/COMP20/Tufts-Schedule-React/frontend/src/components/Schedule.js",[],"/Users/dumbcan/Desktop/COMP20/Tufts-Schedule-React/frontend/src/components/Homepage.js",["53","54","55","56","57"],"/*\n    Pages: Home page\n    Created by Jeremy Jung\n*/\n\nimport React from 'react';\nimport CoursesSelectedList from './views/CoursesSelectedList.js';\nimport CourseNameRecommendation from './views/CourseNameRecommendation.js';\nimport OptionsMainList from './views/OptionsMainList.js';\nimport style from './views/styles/Homepage.module.css';\n\nclass Homepage extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            listCourseIDs: null, // all course IDs in semester catalog (mapped first letter)\n            currentInput: null,\n            recommendedCourseIDs: null,\n            selectedCourses: []\n        }\n\n        this.handleAdd = this.handleAdd.bind(this);\n        this.recommendSearch = this.recommendSearch.bind(this);\n    }\n\n    // O(n)\n    checkCourseID(courseID) {\n        if (courseID != \"\") {\n            let firstLetter = courseID[0];\n            let listMatches = this.state.listCourseIDs[firstLetter];\n            if (listMatches != undefined) {\n                let exists = false;\n                for (let index in listMatches) {\n                    if (listMatches[index] == courseID)\n                        exists = true;\n                }\n                return exists;\n            }\n            else {\n                return false;\n            }\n        }\n        else {\n            return false;\n        }\n    }\n\n    handleAdd(event) {\n        //prevent default event handler\n        event.preventDefault();\n\n        let nameField = document.getElementById(\"input\");\n        let name = nameField.value.toUpperCase(); // get user input\n\n        // Check existence of user input and UPDATE STATE selectedCourses \n        if (this.checkCourseID(name)) {\n            var arrayJoined = this.state.selectedCourses.concat(name);\n            this.setState({ selectedCourses: arrayJoined });\n        }\n\n        nameField.value = \"\";\n    }\n\n    handleGenerate() {\n        var selectedCourses = this.state.selectedCourses;\n        console.log(\"handling generate\");\n    }\n\n    componentDidMount() {\n        // initialize {listCourseIDs} in this component's state\n        this.getListCourseIDs();\n    }\n    \n    async getListCourseIDs() {\n        var API_URL = process.env.REACT_APP_API_URL + \"/courses/alg/search-table\";\n        fetch(API_URL)\n            .then(\n                (response) => response.json()\n            )\n            .then(result => {\n                //if the request is valid\n                this.setState({\n                    listCourseIDs: result\n                });\n            },\n            (error) => {\n                console.log(\"error\", error);\n        });\n    }\n\n    /* CourseID input scripts */\n\n    /* TODO: improve coverage beyond first letter */\n    /* TODO: move script to recommendation */\n    /* recommendSearch() is defined in this compoenent because \n    it is the event listener for input change*/\n    async recommendSearch() {\n        let nameField = document.getElementById(\"input\");\n        let name = nameField.value.toUpperCase(); // get user input\n\n        this.setState((state) => ({ currentInput: name })); // update state (currentInput)\n    }\n\n    // todo: link\n    handleChange() {\n        let nameField = document.getElementById(\"input\");\n        let name = nameField.value.toUpperCase(); // get user input\n        let nameLength = name.length;\n        this.setState((state) => ({ currentInput: name })); // update state (currentInput)\n    }\n\n\n    render() {\n        /* asynchronously render home page after getting courseIDs*/\n        if (this.state.listCourseIDs == null) {\n            // render loading state...\n            return (\n                <div className={style.container}>\n                    Loading...\n                </div>\n            );\n        }\n        else {\n            // render real UI..\n                return (\n                    <div className={style.container}>\n                        <CoursesSelectedList handleGenerate = {this.handleGenerate.bind(this)} selectedCourses={this.state.selectedCourses}>\n                            <input type = \"submit\"></input>\n                        </CoursesSelectedList>\n                        <div className={style.containerInput}>\n                            <h1>Choose a course</h1>\n                            <div>\n                                <form onSubmit={this.handleAdd}>\n                                    <div>\n                                        <input onChange={this.recommendSearch} list='recommendedCourseIDs' id=\"input\" className={style.courseInput} type=\"text\" autoComplete=\"off\" placeholder=\"COMP-0015\" />\n                                        <CourseNameRecommendation listCourseIDs = {this.state.listCourseIDs} currentInput = {this.state.currentInput}></CourseNameRecommendation>\n                                    </div>\n                                    <div>\n                                        <input className={style.courseSubmit} type=\"submit\" value=\"Add\" />\n                                    </div>\n                                </form>\n                            </div>\n                        </div>\n                        <OptionsMainList></OptionsMainList>\n                    </div>\n                );\n        }\n    }\n}\n\nexport default Homepage;","/Users/dumbcan/Desktop/COMP20/Tufts-Schedule-React/frontend/src/components/views/OptionsMainList.js",["58"],"/*\n    List of buttons on the top right corner listing possible options for algorithms\n    Created by Jeremy Jung\n*/\n\nimport React from 'react';\nimport style from './styles/OptionsMainList.module.css';\nimport OptionMainButton from './OptionMainButton.js';\n\nclass OptionsMainList extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    handleSubmit(event) {\n        //prevent default event handler\n        event.preventDefault();\n    }\n\n    render() {\n        return (\n            <div className={style.container}>\n                <OptionMainButton></OptionMainButton>\n                <OptionMainButton></OptionMainButton>\n                <OptionMainButton></OptionMainButton>\n            </div>\n        );\n    }\n}\n\nexport default OptionsMainList;","/Users/dumbcan/Desktop/COMP20/Tufts-Schedule-React/frontend/src/components/views/CoursesSelectedList.js",["59"],"/*\n    List containing selected selected courses represented by {CourseSelected}\n    Created by Jeremy Jung\n*/\n\nimport React from 'react';\nimport style from './styles/CoursesSelectedList.module.css';\nimport CourseSelected from './CourseSelected.js';\nimport {\n    Link\n} from \"react-router-dom\";\nclass CoursesSelectedList extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        return (\n            <div className = {style.container} id = \"coursesSelectedList\">\n                <h1>Your selected courses</h1>\n                <div>\n                    {this.props.selectedCourses.map(function (courseID) {\n                        return <CourseSelected courseID = {courseID}></CourseSelected>\n                    })}\n                </div>\n                <Link className = {style.button} onClick = {this.props.handleGenerate} to = \"/schedule\">\n                    Schedule\n                </Link>\n            </div>\n        );\n    }\n}\n\nexport default CoursesSelectedList;","/Users/dumbcan/Desktop/COMP20/Tufts-Schedule-React/frontend/src/components/views/CourseNameRecommendation.js",["60","61","62","63"],"/*\n    Drop down list of course name suggestions\n    Created by Jeremy Jung\n*/\n\nimport React from 'react';\n//import style from './styles/CourseNameRecommendation.module.css';\n\n\nclass CourseNameRecommendation extends React.Component {\n    \n    constructor (props) {\n        super(props);\n        console.log(\"render\");\n\n        this.state = {\n            recommendedCourseIDs: null\n        }\n    }\n    // O(k) where k is length of courseID\n    recommendSearch(listCourseIDs, courseID) {\n        var courseIDsRecommended = [];\n\n        if (courseID != undefined || courseID != null) {\n            // recommend if there is at least one character in input\n            if (courseID[0] != undefined) {\n                let courseIDLength = courseID.length;\n\n                let mappedResults = listCourseIDs.data[courseID];\n                var len = 5; \n                // if (listCourseIDs.length < 5)\n                // {\n                //     len = listCourseIDs.length() - 1;\n                // }\n                console.log(\"mappedResukt: \" + mappedResults);\n                //console.log(\"listCourseIDs: \" + listCourseIDs);\n                courseIDsRecommended = [];\n                for (let i = 0; i < 5; i++) {\n                    console.log(\"in here: \" + mappedResults);\n                    console.log(\"listCourseIDs: \" + listCourseIDs);\n                    courseIDsRecommended.push(mappedResults);\n                }\n\n               \n            }\n            else {\n                courseIDsRecommended = [];\n            }\n        }\n        else {\n            courseIDsRecommended = [];\n        }\n\n        return courseIDsRecommended\n    }\n\n    render() {\n        let currentInput = this.props.currentInput;\n        let listCourseIDs = this.props.listCourseIDs;\n        console.log(\"rendeing\")\n        var recommendedCourseIDs = this.recommendSearch(listCourseIDs, currentInput);\n\n        console.log(recommendedCourseIDs);\n\n        return(\n            <datalist id=\"recommendedCourseIDs\">\n                {recommendedCourseIDs.map(function (id) {\n                    return <option key={id} value={id} ></option>\n                })}\n            </datalist>\n        );\n    }\n\n}\nexport default CourseNameRecommendation;","/Users/dumbcan/Desktop/COMP20/Tufts-Schedule-React/frontend/src/components/views/OptionMainButton.js",[],"/Users/dumbcan/Desktop/COMP20/Tufts-Schedule-React/frontend/src/components/views/CourseSelected.js",["64"],"/*\n    Selected course\n    Created by Jeremy Jung\n*/\nimport React from 'react';\nimport style from './styles/CourseSelected.module.css';\n\nclass CourseSelected extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    handleSubmit(event) {\n        //prevent default event handler\n        event.preventDefault();\n    }\n\n    render() {\n        return (\n            <div className={style.course}>\n                {this.props.courseID}\n            </div>\n        );\n    }\n}\n\nexport default CourseSelected;","/Users/dumbcan/Desktop/COMP20/Tufts-Schedule-React/frontend/src/components/Event.js",[],{"ruleId":"65","replacedBy":"66"},{"ruleId":"67","replacedBy":"68"},{"ruleId":"69","severity":1,"message":"70","line":10,"column":22,"nodeType":"71","messageId":"72","endLine":10,"endColumn":28},{"ruleId":"69","severity":1,"message":"73","line":13,"column":5,"nodeType":"71","messageId":"72","endLine":13,"endColumn":9},{"ruleId":"69","severity":1,"message":"74","line":15,"column":8,"nodeType":"71","messageId":"72","endLine":15,"endColumn":16},{"ruleId":"75","severity":1,"message":"76","line":28,"column":22,"nodeType":"77","messageId":"78","endLine":28,"endColumn":24},{"ruleId":"75","severity":1,"message":"76","line":31,"column":29,"nodeType":"77","messageId":"78","endLine":31,"endColumn":31},{"ruleId":"75","severity":1,"message":"79","line":34,"column":44,"nodeType":"77","messageId":"78","endLine":34,"endColumn":46},{"ruleId":"69","severity":1,"message":"80","line":65,"column":13,"nodeType":"71","messageId":"72","endLine":65,"endColumn":28},{"ruleId":"69","severity":1,"message":"81","line":108,"column":13,"nodeType":"71","messageId":"72","endLine":108,"endColumn":23},{"ruleId":"82","severity":1,"message":"83","line":11,"column":5,"nodeType":"84","messageId":"85","endLine":13,"endColumn":6},{"ruleId":"82","severity":1,"message":"83","line":13,"column":5,"nodeType":"84","messageId":"85","endLine":15,"endColumn":6},{"ruleId":"75","severity":1,"message":"76","line":24,"column":22,"nodeType":"77","messageId":"78","endLine":24,"endColumn":24},{"ruleId":"75","severity":1,"message":"76","line":26,"column":29,"nodeType":"77","messageId":"78","endLine":26,"endColumn":31},{"ruleId":"69","severity":1,"message":"86","line":27,"column":21,"nodeType":"71","messageId":"72","endLine":27,"endColumn":35},{"ruleId":"69","severity":1,"message":"87","line":30,"column":21,"nodeType":"71","messageId":"72","endLine":30,"endColumn":24},{"ruleId":"82","severity":1,"message":"83","line":9,"column":5,"nodeType":"84","messageId":"85","endLine":11,"endColumn":6},"no-native-reassign",["88"],"no-negated-in-lhs",["89"],"no-unused-vars","'Router' is defined but never used.","Identifier","unusedVar","'Link' is defined but never used.","'Calendar' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Expected '===' and instead saw '=='.","'selectedCourses' is assigned a value but never used.","'nameLength' is assigned a value but never used.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","'courseIDLength' is assigned a value but never used.","'len' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]
[{"/Users/jang-hojung/schedulefront/frontend/src/index.js":"1","/Users/jang-hojung/schedulefront/frontend/src/components/views/scripts/fb.js":"2","/Users/jang-hojung/schedulefront/frontend/src/App.js":"3","/Users/jang-hojung/schedulefront/frontend/src/components/Homepage.js":"4","/Users/jang-hojung/schedulefront/frontend/src/components/Event.js":"5","/Users/jang-hojung/schedulefront/frontend/src/components/Schedule.js":"6","/Users/jang-hojung/schedulefront/frontend/src/components/views/CoursesSelectedList.js":"7","/Users/jang-hojung/schedulefront/frontend/src/components/views/CourseNameRecommendation.js":"8","/Users/jang-hojung/schedulefront/frontend/src/components/views/ButtonFBLogin.js":"9","/Users/jang-hojung/schedulefront/frontend/src/components/views/CourseSelected.js":"10"},{"size":377,"mtime":1610242619871,"results":"11","hashOfConfig":"12"},{"size":1237,"mtime":1610322954042,"results":"13","hashOfConfig":"12"},{"size":824,"mtime":1610322954038,"results":"14","hashOfConfig":"12"},{"size":7445,"mtime":1610322954039,"results":"15","hashOfConfig":"12"},{"size":805,"mtime":1610231466566,"results":"16","hashOfConfig":"12"},{"size":2383,"mtime":1610322993563,"results":"17","hashOfConfig":"12"},{"size":1103,"mtime":1610231466578,"results":"18","hashOfConfig":"12"},{"size":4124,"mtime":1610231466575,"results":"19","hashOfConfig":"12"},{"size":2823,"mtime":1610322954041,"results":"20","hashOfConfig":"12"},{"size":541,"mtime":1610231466577,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"gn4ll5",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"24"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"24"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"24"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46"},"/Users/jang-hojung/schedulefront/frontend/src/index.js",[],["47","48"],"/Users/jang-hojung/schedulefront/frontend/src/components/views/scripts/fb.js",[],"/Users/jang-hojung/schedulefront/frontend/src/App.js",["49"],"/* \n    Main react app \n    Created by Jeremy Jung\n*/\nimport React from 'react';\nimport Homepage from \"./components/Homepage.js\";\nimport Schedule from \"./components/Schedule.js\";\n\nimport {\n    Switch,\n    Route\n} from \"react-router-dom\";\nimport Calendar from './components/Event.js';\n\nexport default class App extends React.Component {\n\n    render() {\n        return (\n            <div>\n                {/* A <Switch> looks through its children <Route>s and\n        renders the first one that matches the current URL. */}\n                <Switch>\n                    <Route path=\"/schedule\">\n                        <Schedule />\n                    </Route>\n                    <Route path=\"/\">\n                        <Homepage />\n                    </Route>\n                </Switch>\n            </div>\n        );\n    }\n}","/Users/jang-hojung/schedulefront/frontend/src/components/Homepage.js",["50"],"/*\n    Pages: Home page\n    Created by Jeremy Jung\n*/\n\nimport React from 'react';\nimport Popup from 'reactjs-popup';\nimport CoursesSelectedList from './views/CoursesSelectedList.js';\nimport CourseNameRecommendation from './views/CourseNameRecommendation.js';\nimport style from './views/styles/Homepage.module.css';\n\n/* scripts */\n\nclass Homepage extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            listCourseIDs: null, // all course IDs in semester catalog (mapped first letter)\n            currentInput: null,\n            recommendedCourseIDs: null,\n            selectedCourses: [],\n            checkSameID: true\n        }\n\n        this.handleAdd = this.handleAdd.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    /*\n     * handleCheckID\n     * checks if user is entering a valid courseID.\n     * effect: sets checkSameID to false if multiple courses with different ID \n     *          is found, meaning that the user hasn't entered the exact courseID\n     */\n    handleCheckID(mappedResults) {\n        // Debug purpose\n        console.log(\"mappedResults length: \" + mappedResults.length);\n        console.log(\"checkSameID: \" + this.state.checkSameID);\n        console.log(mappedResults[0]);\n        // console.log(mappedResults[1]);\n        // console.log(mappedResults[0].course_id == mappedResults[1].course_id);\n\n        \n        let checkID = mappedResults[0].course_id;\n\n        // checks if the user input is a valid courseID\n        for (var i = 0; i < mappedResults.length; i++)\n        {\n            console.log(this.state.checkSameID);\n            console.log(\"the length of mappedReusults:\" + mappedResults.length);\n            if (mappedResults[i].course_id !== checkID)\n            {\n                console.log(\"it went in here\");\n                // prevent user from adding incomplete course ID \n                this.setState({\n                    checkSameID: false\n                })\n                break;\n            }\n            console.log(this.state.checkSameID);\n\n        }\n\n    }\n\n    // handles the add function. prevents user from adding non-existing courseID\n    async handleAdd(event) {\n        console.log(\"the beginning state: \" + this.state.checkSameID);\n        //prevent default event handler\n        event.preventDefault();\n        let nameField = document.getElementById(\"input\");\n        let mappedResults = this.state.listCourseIDs[this.state.currentInput];\n        // checks if user input is valid\n        if (mappedResults !== undefined)\n        {\n            // needs checkSameID to be up to date. always.\n            await this.handleCheckID(mappedResults);\n            // if(this.state.checkSameID && mappedResults.length > 1)\n            // {\n            //     return <Popup \n            //     trigger={<div className=\"popUp\">Add</div>} \n            //     position=\"right top\"\n            //     on=\"hover\"\n            //     closeOnDocumentClick\n            //     mouseLeaveDelay={300}\n            //     mouseEnterDelay={0}\n            //     contentStyle={{ padding: \"0px\", border: \"none\" }}\n            //     arrow={false} >\n\n                    \n            //     </Popup>;\n            // }\n            // console.log(\"selectedCourses: \" + this.state.selectedCourses);\n            // console.log(\"include? \" + ( (this.state.selectedCourses.includes(mappedResults[0].course_id))));\n            if (this.state.checkSameID && (this.state.selectedCourses.includes(mappedResults[0].course_id)))\n            {\n                window.alert(\"This course has already been added!\");\n            }\n            else if (this.state.checkSameID || mappedResults.length === 1)\n            {\n                let name = this.state.currentInput.toUpperCase(); // get user input\n\n                // UPDATE STATE selectedCourses \n                var arrayJoined = this.state.selectedCourses.concat(name);\n                this.setState({ selectedCourses: arrayJoined });\n\n                nameField.value = \"\";\n            }\n            else{\n                console.log(\"here 2\");\n                window.alert(\"Please enter a VALID COURSE ID!\");\n                console.log(\"alerts here\");\n                // resets the state\n                this.setState({\n                    checkSameID: true\n                })\n            }\n        }\n        else{\n            console.log(\"here 1's map: \" + mappedResults);\n            console.log(\"here 1\");\n            window.alert(\"Please enter a VALID COURSE ID!\");\n        }\n\n    }\n\n    handleGenerate() {\n        var selectedCourses = this.state.selectedCourses;\n        console.log(\"handling generate\");\n        console.log(\"selectedCourses: \", selectedCourses);\n    }\n\n    componentDidMount() {\n        // initialize {listCourseIDs} in this component's state\n        this.getListCourseIDs();\n\n    }\n    \n    async getListCourseIDs() {\n        var API_URL = process.env.REACT_APP_API_URL + \"/courses/alg/search-table\";\n        fetch(API_URL)\n            .then(\n                (response) => response.json()\n            )\n            .then(result => {\n                //if the request is valid\n                this.setState({\n                    listCourseIDs: result.data\n                });\n            },\n            (error) => {\n                console.log(\"error\", error);\n        });\n    }\n\n    /* CourseID input scripts */\n\n    // todo: link\n    handleChange() {\n        console.log(\"handling change\");\n        let nameField = document.getElementById(\"input\");\n        let name = nameField.value.toLowerCase(); // get user input\n        this.setState((state) => ({ currentInput: name })); // update state (currentInput)\n    }\n\n    render() {\n        /* asynchronously render home page after getting courseIDs*/\n        if (this.state.listCourseIDs == null) {\n            // render loading state...\n            return (\n                <div className={style.container}>\n                    Loading...\n                </div>\n            );\n        }\n        else {\n            // render real UI..\n            return (\n                <div className={style.container}>\n                    \n                    <CoursesSelectedList handleGenerate = {this.handleGenerate.bind(this)} selectedCourses={this.state.selectedCourses} listCourseIDs = {this.state.listCourseIDs}>\n                        <input type = \"submit\"></input>\n                    </CoursesSelectedList>\n                    <div className={style.containerInput}>\n                        <h1>Choose a course</h1>\n                        <div>\n                            <form onSubmit={this.handleAdd}>\n                                <div>\n                                    <input onChange={this.handleChange} list='recommendedCourseIDs' id=\"input\" className={style.courseInput} type=\"text\" autoComplete=\"off\" placeholder=\"COMP-0015\" />\n                                    <CourseNameRecommendation listCourseIDs = {this.state.listCourseIDs} currentInput = {this.state.currentInput}></CourseNameRecommendation>\n                                </div>\n                                <div>\n                                    <input className={style.courseSubmit} type=\"submit\" value=\"Add\" />\n                                </div>\n                            </form>\n                        </div>\n                    </div>\n                </div>\n            );\n        }\n    }\n}\n\nexport default Homepage;","/Users/jang-hojung/schedulefront/frontend/src/components/Event.js",[],"/Users/jang-hojung/schedulefront/frontend/src/components/Schedule.js",[],"/Users/jang-hojung/schedulefront/frontend/src/components/views/CoursesSelectedList.js",[],"/Users/jang-hojung/schedulefront/frontend/src/components/views/CourseNameRecommendation.js",["51","52","53","54"],"/*\n    Drop down list of course name suggestions\n    Created by Jeremy Jung\n*/\n\nimport React from 'react';\n//import style from './styles/CourseNameRecommendation.module.css';\n\n\nclass CourseNameRecommendation extends React.Component {\n    \n    constructor (props) {\n        super(props);\n        console.log(\"render\");\n\n        this.state = {\n            recommendedCourseIDs: null,\n\n        }\n    }\n\n    // O(k) where k is length of courseID\n    // courseID is the user input\n    // listCourseIDs takes in the courseID\n    recommendSearch (listCourseIDs, courseID) {\n        var courseIDsRecommended = [];\n        let mappedResults = [];\n\n        if (courseID != undefined || courseID != null) {\n\n            // recommend if there is at least one character in input\n            if (courseID[0] != undefined) {\n\n                // mapperResults is an array of \"matched\" courses (from API) by the user input \n                mappedResults = listCourseIDs[courseID];\n                // console.log(\"listCourseIDs: \" + listCourseIDs);\n                // console.log(\"courseID: \" + courseID);\n\n\n                if (mappedResults != undefined) {\n\n                    let resultsMaxDisplay = 5;\n                    \n                    // lower maximum results length if one specified is greater than what's possible\n                    if (resultsMaxDisplay > mappedResults.length)\n                        resultsMaxDisplay = mappedResults.length;\n\n                    /* DEBUG: list all info */\n                    // console.log(\"resultsMaxDisplay: \", resultsMaxDisplay)\n                    // console.log(\"mappedResults:\", mappedResults)\n                    // console.log(\"mappedResults.length: \", mappedResults.length)\n                    // console.log(\"mappedResults[0]: \" + mappedResults[0]);\n                    // console.log(\"mappedResults[0].course_id: \" + mappedResults[0].course_id);\n\n                    let i = 0;\n                    /* add recommended courseIDs to list by amount specified by resultsMaxDisplay*/\n                    while (courseIDsRecommended.length < resultsMaxDisplay && i < mappedResults.length) {\n                        // console.log(\"i: \", i);\n                        /* break if i is equal to the length of mappedResults */\n                        if (i >= mappedResults.length)\n                            break; \n\n                        let courseId = mappedResults[i].course_id;\n                        console.log(\"mappedResults:\", mappedResults);\n\n                        /* check if the courseId already exists in courseIDsRecommended */\n                        let doesNotExist = true;\n                        for (let j = 0; j < courseIDsRecommended.length; j++) {\n\n                            if (courseIDsRecommended[j] == courseId) {\n                                doesNotExist = false;\n                                break;\n                            }\n                        }\n\n                        /* push to recommended list if entry does not yet exist */\n                        if (doesNotExist) {\n                            courseIDsRecommended.push(courseId);\n                        }\n                        i++;\n                    }\n\n                }\n                else {\n                    courseIDsRecommended = [];\n                }\n               \n            }\n            else {\n                courseIDsRecommended = [];\n            }\n        }\n        else {\n            courseIDsRecommended = [];\n        }\n\n        return courseIDsRecommended;\n\n    }\n\n    \n\n    render() {\n\n        let currentInput = this.props.currentInput;\n\n        let listCourseIDs = this.props.listCourseIDs;\n\n        var recommendedCourseIDs = this.recommendSearch(listCourseIDs, currentInput);\n\n        console.log(\"recommendedCourseIDs: \" + recommendedCourseIDs);\n        \n        return(\n            <datalist id=\"recommendedCourseIDs\">\n                {recommendedCourseIDs.map(function (id) {\n                    return <option key={id} value={id} ></option>\n                })}\n            </datalist>\n        );\n    }\n\n}\nexport default CourseNameRecommendation;","/Users/jang-hojung/schedulefront/frontend/src/components/views/ButtonFBLogin.js",[],"/Users/jang-hojung/schedulefront/frontend/src/components/views/CourseSelected.js",["55"],"/*\n    Selected course\n    Created by Jeremy Jung\n*/\nimport React from 'react';\nimport style from './styles/CourseSelected.module.css';\n\nclass CourseSelected extends React.Component {\n    constructor(props) {\n        super(props);\n       \n    }\n\n    handleSubmit(event) {\n        //prevent default event handler\n        event.preventDefault();\n    }\n\n   \n\n    render() {\n       \n        return (\n        <div className={style.course}>\n            {this.props.courseID}\n        </div>\n        );\n      \n    }\n}\n\nexport default CourseSelected;",{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","replacedBy":"59"},{"ruleId":"60","severity":1,"message":"61","line":13,"column":8,"nodeType":"62","messageId":"63","endLine":13,"endColumn":16},{"ruleId":"60","severity":1,"message":"64","line":7,"column":8,"nodeType":"62","messageId":"63","endLine":7,"endColumn":13},{"ruleId":"65","severity":1,"message":"66","line":29,"column":22,"nodeType":"67","messageId":"68","endLine":29,"endColumn":24},{"ruleId":"65","severity":1,"message":"66","line":32,"column":29,"nodeType":"67","messageId":"68","endLine":32,"endColumn":31},{"ruleId":"65","severity":1,"message":"66","line":40,"column":35,"nodeType":"67","messageId":"68","endLine":40,"endColumn":37},{"ruleId":"65","severity":1,"message":"69","line":70,"column":57,"nodeType":"67","messageId":"68","endLine":70,"endColumn":59},{"ruleId":"70","severity":1,"message":"71","line":9,"column":5,"nodeType":"72","messageId":"73","endLine":12,"endColumn":6},"no-native-reassign",["74"],"no-negated-in-lhs",["75"],"no-unused-vars","'Calendar' is defined but never used.","Identifier","unusedVar","'Popup' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Expected '===' and instead saw '=='.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","no-global-assign","no-unsafe-negation"]